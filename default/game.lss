
game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000382  00800100  00002876  0000290a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800482  00800482  00002c8c  2**0
                  ALLOC
  3 .stab         00000c60  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002db  00000000  00000000  000038ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001b8  00000000  00000000  00003bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000882  00000000  00000000  00003d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000299c  00000000  00000000  00004601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010e0  00000000  00000000  00006f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a12  00000000  00000000  0000807d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  0000aa90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008e3  00000000  00000000  0000aec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000139d  00000000  00000000  0000b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000003e7  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  0000cf27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__vector_10>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e7       	ldi	r30, 0x76	; 118
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 38       	cpi	r26, 0x82	; 130
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	14 e0       	ldi	r17, 0x04	; 4
      b4:	a2 e8       	ldi	r26, 0x82	; 130
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3f       	cpi	r26, 0xF8	; 248
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 95 02 	call	0x52a	; 0x52a <main>
      c6:	0c 94 39 14 	jmp	0x2872	; 0x2872 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <init_obstacles>:
#define INPUT_KEY_TIMEOUT 10  
//Number of rows of obstacles filled when the game starts
#define INITIAL_FILLED 12


void init_obstacles(){
      ce:	8f 92       	push	r8
      d0:	9f 92       	push	r9
      d2:	af 92       	push	r10
      d4:	bf 92       	push	r11
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29

	for(int i = 0; i<MAX_OBSTACLES;i++)
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
	{
		main_obstacles[i] = 0;
      ea:	2c ea       	ldi	r18, 0xAC	; 172
      ec:	34 e0       	ldi	r19, 0x04	; 4
      ee:	fc 01       	movw	r30, r24
      f0:	ee 0f       	add	r30, r30
      f2:	ff 1f       	adc	r31, r31
      f4:	e2 0f       	add	r30, r18
      f6:	f3 1f       	adc	r31, r19
      f8:	11 82       	std	Z+1, r1	; 0x01
      fa:	10 82       	st	Z, r1
#define INITIAL_FILLED 12


void init_obstacles(){

	for(int i = 0; i<MAX_OBSTACLES;i++)
      fc:	01 96       	adiw	r24, 0x01	; 1
      fe:	8f 30       	cpi	r24, 0x0F	; 15
     100:	91 05       	cpc	r25, r1
     102:	a9 f7       	brne	.-22     	; 0xee <init_obstacles+0x20>
     104:	0b e0       	ldi	r16, 0x0B	; 11
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	cc 24       	eor	r12, r12
     10a:	dd 24       	eor	r13, r13

	int current_obstacle = 0;

	for(int i = 0; i<INITIAL_FILLED;i++)
	{
		int new_rand = (rand() % 4);
     10c:	ee 24       	eor	r14, r14
     10e:	ff 24       	eor	r15, r15
     110:	68 94       	set
     112:	e2 f8       	bld	r14, 2
				new_rand = (rand() % 4);
			}
		}
		else if(current_obstacle == 3)
		{
			new_rand = 0;
     114:	88 24       	eor	r8, r8
     116:	99 24       	eor	r9, r9
		//Proper obstacles algorithm like the one in functions.c
		if(current_obstacle == 0)
		{
			while(new_rand == 0)
			{
				new_rand = (rand() % 3)+1;
     118:	c3 e0       	ldi	r28, 0x03	; 3
     11a:	d0 e0       	ldi	r29, 0x00	; 0
		else if(current_obstacle == 3)
		{
			new_rand = 0;
		}
		current_obstacle = new_rand;
		main_obstacles[INITIAL_FILLED-1-i] = new_rand;
     11c:	0f 2e       	mov	r0, r31
     11e:	fc ea       	ldi	r31, 0xAC	; 172
     120:	af 2e       	mov	r10, r31
     122:	f4 e0       	ldi	r31, 0x04	; 4
     124:	bf 2e       	mov	r11, r31
     126:	f0 2d       	mov	r31, r0
     128:	01 c0       	rjmp	.+2      	; 0x12c <init_obstacles+0x5e>
		}
		else if(current_obstacle == 3)
		{
			new_rand = 0;
		}
		current_obstacle = new_rand;
     12a:	6c 01       	movw	r12, r24

	int current_obstacle = 0;

	for(int i = 0; i<INITIAL_FILLED;i++)
	{
		int new_rand = (rand() % 4);
     12c:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
     130:	b7 01       	movw	r22, r14
     132:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
		//Proper obstacles algorithm like the one in functions.c
		if(current_obstacle == 0)
     136:	c1 14       	cp	r12, r1
     138:	d1 04       	cpc	r13, r1
     13a:	51 f4       	brne	.+20     	; 0x150 <init_obstacles+0x82>
		{
			while(new_rand == 0)
     13c:	00 97       	sbiw	r24, 0x00	; 0
     13e:	69 f5       	brne	.+90     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 3)+1;
     140:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
     144:	be 01       	movw	r22, r28
     146:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
     14a:	01 96       	adiw	r24, 0x01	; 1
	{
		int new_rand = (rand() % 4);
		//Proper obstacles algorithm like the one in functions.c
		if(current_obstacle == 0)
		{
			while(new_rand == 0)
     14c:	c9 f3       	breq	.-14     	; 0x140 <init_obstacles+0x72>
     14e:	25 c0       	rjmp	.+74     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 3)+1;
			}
		}
		else if(current_obstacle == 1)
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	c2 16       	cp	r12, r18
     154:	d1 04       	cpc	r13, r1
     156:	61 f4       	brne	.+24     	; 0x170 <init_obstacles+0xa2>
		{
			while(new_rand == 2)
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	91 05       	cpc	r25, r1
     15c:	f1 f4       	brne	.+60     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 4);
     15e:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
     162:	b7 01       	movw	r22, r14
     164:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
				new_rand = (rand() % 3)+1;
			}
		}
		else if(current_obstacle == 1)
		{
			while(new_rand == 2)
     168:	82 30       	cpi	r24, 0x02	; 2
     16a:	91 05       	cpc	r25, r1
     16c:	c1 f3       	breq	.-16     	; 0x15e <init_obstacles+0x90>
     16e:	15 c0       	rjmp	.+42     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 4);
			}
		}
		else if(current_obstacle == 2)
     170:	22 e0       	ldi	r18, 0x02	; 2
     172:	c2 16       	cp	r12, r18
     174:	d1 04       	cpc	r13, r1
     176:	61 f4       	brne	.+24     	; 0x190 <init_obstacles+0xc2>
		{
			while(new_rand == 1)
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	91 05       	cpc	r25, r1
     17c:	71 f4       	brne	.+28     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 4);
     17e:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
     182:	b7 01       	movw	r22, r14
     184:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
				new_rand = (rand() % 4);
			}
		}
		else if(current_obstacle == 2)
		{
			while(new_rand == 1)
     188:	81 30       	cpi	r24, 0x01	; 1
     18a:	91 05       	cpc	r25, r1
     18c:	c1 f3       	breq	.-16     	; 0x17e <init_obstacles+0xb0>
     18e:	05 c0       	rjmp	.+10     	; 0x19a <init_obstacles+0xcc>
			{
				new_rand = (rand() % 4);
			}
		}
		else if(current_obstacle == 3)
     190:	23 e0       	ldi	r18, 0x03	; 3
     192:	c2 16       	cp	r12, r18
     194:	d1 04       	cpc	r13, r1
     196:	09 f4       	brne	.+2      	; 0x19a <init_obstacles+0xcc>
		{
			new_rand = 0;
     198:	c4 01       	movw	r24, r8
		}
		current_obstacle = new_rand;
		main_obstacles[INITIAL_FILLED-1-i] = new_rand;
     19a:	f8 01       	movw	r30, r16
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	ea 0d       	add	r30, r10
     1a2:	fb 1d       	adc	r31, r11
     1a4:	91 83       	std	Z+1, r25	; 0x01
     1a6:	80 83       	st	Z, r24
     1a8:	01 50       	subi	r16, 0x01	; 1
     1aa:	10 40       	sbci	r17, 0x00	; 0
		main_obstacles[i] = 0;
	}

	int current_obstacle = 0;

	for(int i = 0; i<INITIAL_FILLED;i++)
     1ac:	2f ef       	ldi	r18, 0xFF	; 255
     1ae:	0f 3f       	cpi	r16, 0xFF	; 255
     1b0:	12 07       	cpc	r17, r18
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <init_obstacles+0xe8>
     1b4:	ba cf       	rjmp	.-140    	; 0x12a <init_obstacles+0x5c>
		main_obstacles[INITIAL_FILLED-1-i] = new_rand;

	}
	

}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	bf 90       	pop	r11
     1c8:	af 90       	pop	r10
     1ca:	9f 90       	pop	r9
     1cc:	8f 90       	pop	r8
     1ce:	08 95       	ret

000001d0 <add_custom_char>:

//Store temporal custom characters to CGRAM
void add_custom_char()
{
     1d0:	0f 93       	push	r16
     1d2:	1f 93       	push	r17
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
	//Store Level number character
	if(level <= 50){
     1d8:	80 91 ca 04 	lds	r24, 0x04CA
     1dc:	90 91 cb 04 	lds	r25, 0x04CB
     1e0:	83 33       	cpi	r24, 0x33	; 51
     1e2:	91 05       	cpc	r25, r1
     1e4:	24 f5       	brge	.+72     	; 0x22e <add_custom_char+0x5e>
     1e6:	c0 e0       	ldi	r28, 0x00	; 0
     1e8:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0;i<8;i++)
		{
			lcd_write_ctrl(LCD_CGRAM+(8*7)+i);
			lcd_write_data(__cnum[i+(level-1)*8]);
     1ea:	04 e8       	ldi	r16, 0x84	; 132
     1ec:	11 e0       	ldi	r17, 0x01	; 1
{
	//Store Level number character
	if(level <= 50){
		for(int i=0;i<8;i++)
		{
			lcd_write_ctrl(LCD_CGRAM+(8*7)+i);
     1ee:	ce 01       	movw	r24, r28
     1f0:	88 58       	subi	r24, 0x88	; 136
     1f2:	9f 4f       	sbci	r25, 0xFF	; 255
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
			lcd_write_data(__cnum[i+(level-1)*8]);
     1fc:	e0 91 ca 04 	lds	r30, 0x04CA
     200:	f0 91 cb 04 	lds	r31, 0x04CB
     204:	31 97       	sbiw	r30, 0x01	; 1
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	ee 0f       	add	r30, r30
     210:	ff 1f       	adc	r31, r31
     212:	ec 0f       	add	r30, r28
     214:	fd 1f       	adc	r31, r29
     216:	e0 0f       	add	r30, r16
     218:	f1 1f       	adc	r31, r17
     21a:	80 81       	ld	r24, Z
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
//Store temporal custom characters to CGRAM
void add_custom_char()
{
	//Store Level number character
	if(level <= 50){
		for(int i=0;i<8;i++)
     226:	21 96       	adiw	r28, 0x01	; 1
     228:	c8 30       	cpi	r28, 0x08	; 8
     22a:	d1 05       	cpc	r29, r1
     22c:	01 f7       	brne	.-64     	; 0x1ee <add_custom_char+0x1e>
			lcd_write_data(__cnum[i+(level-1)*8]);
		}
	}
	
	//Store improved car characters after certain level
	if(level >= 10){
     22e:	80 91 ca 04 	lds	r24, 0x04CA
     232:	90 91 cb 04 	lds	r25, 0x04CB
     236:	8a 30       	cpi	r24, 0x0A	; 10
     238:	91 05       	cpc	r25, r1
     23a:	0c f4       	brge	.+2      	; 0x23e <add_custom_char+0x6e>
     23c:	3f c0       	rjmp	.+126    	; 0x2bc <add_custom_char+0xec>
     23e:	04 e1       	ldi	r16, 0x14	; 20
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	c0 e7       	ldi	r28, 0x70	; 112
     244:	d0 e0       	ldi	r29, 0x00	; 0
		//Store car character
		for(int i=0;i<8;i++)
		{
			lcd_write_ctrl(LCD_CGRAM+(8*6)+i);
     246:	ce 01       	movw	r24, r28
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
			lcd_write_data(__ccar[i]);
     250:	f8 01       	movw	r30, r16
     252:	81 91       	ld	r24, Z+
     254:	8f 01       	movw	r16, r30
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	61 e0       	ldi	r22, 0x01	; 1
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     260:	21 96       	adiw	r28, 0x01	; 1
	}
	
	//Store improved car characters after certain level
	if(level >= 10){
		//Store car character
		for(int i=0;i<8;i++)
     262:	c8 37       	cpi	r28, 0x78	; 120
     264:	d1 05       	cpc	r29, r1
     266:	79 f7       	brne	.-34     	; 0x246 <add_custom_char+0x76>
     268:	04 e3       	ldi	r16, 0x34	; 52
     26a:	13 e0       	ldi	r17, 0x03	; 3
     26c:	c8 e6       	ldi	r28, 0x68	; 104
     26e:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_write_data(__ccar[i]);
		}
		//Store Car on top of box character
		for(int i=0;i<8;i++)
		{
			lcd_write_ctrl(LCD_CGRAM+(8*5)+i);
     270:	ce 01       	movw	r24, r28
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
			lcd_write_data(__ccarjumpbox[i]);
     27a:	f8 01       	movw	r30, r16
     27c:	81 91       	ld	r24, Z+
     27e:	8f 01       	movw	r16, r30
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     28a:	21 96       	adiw	r28, 0x01	; 1
		{
			lcd_write_ctrl(LCD_CGRAM+(8*6)+i);
			lcd_write_data(__ccar[i]);
		}
		//Store Car on top of box character
		for(int i=0;i<8;i++)
     28c:	c0 37       	cpi	r28, 0x70	; 112
     28e:	d1 05       	cpc	r29, r1
     290:	79 f7       	brne	.-34     	; 0x270 <add_custom_char+0xa0>
     292:	04 e2       	ldi	r16, 0x24	; 36
     294:	13 e0       	ldi	r17, 0x03	; 3
     296:	c0 e6       	ldi	r28, 0x60	; 96
     298:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_write_data(__ccarjumpbox[i]);
		}
		//Store Car jumping character
		for(int i=0;i<8;i++)
		{
			lcd_write_ctrl(LCD_CGRAM+(8*4)+i);
     29a:	ce 01       	movw	r24, r28
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
			lcd_write_data(__ccarjumping[i]);
     2a4:	f8 01       	movw	r30, r16
     2a6:	81 91       	ld	r24, Z+
     2a8:	8f 01       	movw	r16, r30
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     2b4:	21 96       	adiw	r28, 0x01	; 1
		{
			lcd_write_ctrl(LCD_CGRAM+(8*5)+i);
			lcd_write_data(__ccarjumpbox[i]);
		}
		//Store Car jumping character
		for(int i=0;i<8;i++)
     2b6:	c8 36       	cpi	r28, 0x68	; 104
     2b8:	d1 05       	cpc	r29, r1
     2ba:	79 f7       	brne	.-34     	; 0x29a <add_custom_char+0xca>
			lcd_write_data(__ccarjumping[i]);
		}

	}
	
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <init_characters>:

//Store custom charachters used constantly during the game to CGRAM
void init_characters(){
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
		lcd_write_ctrl(LCD_CGRAM+(8*4)+i);
		lcd_write_data(__ccarjumping[8+i]);
	}
	
	//Store Box character
	for(int i=0;i<8;i++)
     2ce:	0c e7       	ldi	r16, 0x7C	; 124
     2d0:	11 e0       	ldi	r17, 0x01	; 1
	}
	
}

//Store custom charachters used constantly during the game to CGRAM
void init_characters(){
     2d2:	c0 e4       	ldi	r28, 0x40	; 64
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
	//Store L Character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+i);
     2d6:	ce 01       	movw	r24, r28
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__cgeneric[i]);
     2e0:	f8 01       	movw	r30, r16
     2e2:	81 91       	ld	r24, Z+
     2e4:	8f 01       	movw	r16, r30
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     2f0:	21 96       	adiw	r28, 0x01	; 1
}

//Store custom charachters used constantly during the game to CGRAM
void init_characters(){
	//Store L Character
	for(int i=0;i<8;i++)
     2f2:	c8 34       	cpi	r28, 0x48	; 72
     2f4:	d1 05       	cpc	r29, r1
     2f6:	79 f7       	brne	.-34     	; 0x2d6 <init_characters+0x10>
     2f8:	0c e1       	ldi	r16, 0x1C	; 28
     2fa:	13 e0       	ldi	r17, 0x03	; 3
     2fc:	c0 e7       	ldi	r28, 0x70	; 112
     2fe:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_write_data(__cgeneric[i]);
	}
	//Store Car character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+(8*6)+i);
     300:	ce 01       	movw	r24, r28
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__ccar[8+i]);
     30a:	f8 01       	movw	r30, r16
     30c:	81 91       	ld	r24, Z+
     30e:	8f 01       	movw	r16, r30
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     31a:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_ctrl(LCD_CGRAM+i);
		lcd_write_data(__cgeneric[i]);
	}
	//Store Car character
	for(int i=0;i<8;i++)
     31c:	c8 37       	cpi	r28, 0x78	; 120
     31e:	d1 05       	cpc	r29, r1
     320:	79 f7       	brne	.-34     	; 0x300 <init_characters+0x3a>
     322:	0c e3       	ldi	r16, 0x3C	; 60
     324:	13 e0       	ldi	r17, 0x03	; 3
     326:	c8 e6       	ldi	r28, 0x68	; 104
     328:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_write_data(__ccar[8+i]);
	}
	//Store Car on top of box character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+(8*5)+i);
     32a:	ce 01       	movw	r24, r28
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__ccarjumpbox[8+i]);
     334:	f8 01       	movw	r30, r16
     336:	81 91       	ld	r24, Z+
     338:	8f 01       	movw	r16, r30
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     344:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_ctrl(LCD_CGRAM+(8*6)+i);
		lcd_write_data(__ccar[8+i]);
	}
	//Store Car on top of box character
	for(int i=0;i<8;i++)
     346:	c0 37       	cpi	r28, 0x70	; 112
     348:	d1 05       	cpc	r29, r1
     34a:	79 f7       	brne	.-34     	; 0x32a <init_characters+0x64>
     34c:	0c e2       	ldi	r16, 0x2C	; 44
     34e:	13 e0       	ldi	r17, 0x03	; 3
     350:	c0 e6       	ldi	r28, 0x60	; 96
     352:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_write_data(__ccarjumpbox[8+i]);
	}
	//Store Car jumping character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+(8*4)+i);
     354:	ce 01       	movw	r24, r28
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__ccarjumping[8+i]);
     35e:	f8 01       	movw	r30, r16
     360:	81 91       	ld	r24, Z+
     362:	8f 01       	movw	r16, r30
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     36e:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_ctrl(LCD_CGRAM+(8*5)+i);
		lcd_write_data(__ccarjumpbox[8+i]);
	}
	//Store Car jumping character
	for(int i=0;i<8;i++)
     370:	c8 36       	cpi	r28, 0x68	; 104
     372:	d1 05       	cpc	r29, r1
     374:	79 f7       	brne	.-34     	; 0x354 <init_characters+0x8e>
     376:	04 e4       	ldi	r16, 0x44	; 68
     378:	13 e0       	ldi	r17, 0x03	; 3
     37a:	c8 e5       	ldi	r28, 0x58	; 88
     37c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	//Store Box character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+(8*3)+i);
     37e:	ce 01       	movw	r24, r28
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__cbox[i]);
     388:	f8 01       	movw	r30, r16
     38a:	81 91       	ld	r24, Z+
     38c:	8f 01       	movw	r16, r30
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     398:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_ctrl(LCD_CGRAM+(8*4)+i);
		lcd_write_data(__ccarjumping[8+i]);
	}
	
	//Store Box character
	for(int i=0;i<8;i++)
     39a:	c0 36       	cpi	r28, 0x60	; 96
     39c:	d1 05       	cpc	r29, r1
     39e:	79 f7       	brne	.-34     	; 0x37e <init_characters+0xb8>
     3a0:	0c e4       	ldi	r16, 0x4C	; 76
     3a2:	13 e0       	ldi	r17, 0x03	; 3
     3a4:	c0 e5       	ldi	r28, 0x50	; 80
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	//Store Crash character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+(8*2)+i);
     3a8:	ce 01       	movw	r24, r28
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__cbox[8+i]);
     3b2:	f8 01       	movw	r30, r16
     3b4:	81 91       	ld	r24, Z+
     3b6:	8f 01       	movw	r16, r30
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     3c2:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_ctrl(LCD_CGRAM+(8*3)+i);
		lcd_write_data(__cbox[i]);
	}

	//Store Crash character
	for(int i=0;i<8;i++)
     3c4:	c8 35       	cpi	r28, 0x58	; 88
     3c6:	d1 05       	cpc	r29, r1
     3c8:	79 f7       	brne	.-34     	; 0x3a8 <init_characters+0xe2>
	{
		lcd_write_ctrl(LCD_CGRAM+(8*2)+i);
		lcd_write_data(__cbox[8+i]);
	}

	add_custom_char();
     3ca:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <add_custom_char>
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	08 95       	ret

000003d8 <initialize>:

//Initialize buttons 
void initialize(void) {

	// Enable global interrupts.            
	sei();
     3d8:	78 94       	sei

	start_timer_for_randomizer();
     3da:	0e 94 32 07 	call	0xe64	; 0xe64 <start_timer_for_randomizer>
	DDRE  |=  (1 << PE4) | (1 << PE5);
     3de:	82 b1       	in	r24, 0x02	; 2
     3e0:	80 63       	ori	r24, 0x30	; 48
     3e2:	82 b9       	out	0x02, r24	; 2

	PORTE &= ~(1 << PE4);
     3e4:	1c 98       	cbi	0x03, 4	; 3

	PORTE |=  (1 << PE5);   
     3e6:	1d 9a       	sbi	0x03, 5	; 3



	//Initialize buttons
	DDRA &= ~(1 << PA0);
     3e8:	d0 98       	cbi	0x1a, 0	; 26
	DDRA &= ~(1 << PA1);
     3ea:	d1 98       	cbi	0x1a, 1	; 26
	DDRA &= ~(1 << PA2);
     3ec:	d2 98       	cbi	0x1a, 2	; 26
	DDRA &= ~(1 << PA3);
     3ee:	d3 98       	cbi	0x1a, 3	; 26
	DDRA &= ~(1 << PA4);
     3f0:	d4 98       	cbi	0x1a, 4	; 26


	DDRA |= (1 << PA6);
     3f2:	d6 9a       	sbi	0x1a, 6	; 26



	//Initialize lcd
	lcd_init();
     3f4:	0e 94 ca 06 	call	0xd94	; 0xd94 <lcd_init>


	lcd_write_ctrl(LCD_ON);
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_ctrl(LCD_CLEAR);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

		

}
     410:	08 95       	ret

00000412 <init_game>:


void init_game(void) {

	speed = 23437; //1.5 seconds
     412:	8d e8       	ldi	r24, 0x8D	; 141
     414:	9b e5       	ldi	r25, 0x5B	; 91
     416:	90 93 cf 04 	sts	0x04CF, r25
     41a:	80 93 ce 04 	sts	0x04CE, r24
	stop = 0;
     41e:	10 92 d3 04 	sts	0x04D3, r1
     422:	10 92 d2 04 	sts	0x04D2, r1
	jumping = 0;
     426:	10 92 d1 04 	sts	0x04D1, r1
     42a:	10 92 d0 04 	sts	0x04D0, r1
	
	lcd_write_ctrl(LCD_CLEAR);
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	//initialize randomizer with random seed
	srand(seed);
     43a:	80 91 82 04 	lds	r24, 0x0482
     43e:	90 91 83 04 	lds	r25, 0x0483
     442:	0e 94 72 13 	call	0x26e4	; 0x26e4 <srand>
	rand();
     446:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
	
	init_obstacles();
     44a:	0e 94 67 00 	call	0xce	; 0xce <init_obstacles>
	//Initialize car position on bottom left of screen
	position[0] = MAX_OBSTACLES -1;
     44e:	8e e0       	ldi	r24, 0x0E	; 14
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 9b 04 	sts	0x049B, r25
     456:	80 93 9a 04 	sts	0x049A, r24
	position[1] = 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	90 93 9d 04 	sts	0x049D, r25
     462:	80 93 9c 04 	sts	0x049C, r24
	//Start level
	system_timer_count = 0;
     466:	10 92 cd 04 	sts	0x04CD, r1
     46a:	10 92 cc 04 	sts	0x04CC, r1
	level = 1;
     46e:	90 93 cb 04 	sts	0x04CB, r25
     472:	80 93 ca 04 	sts	0x04CA, r24

	init_characters();
     476:	0e 94 63 01 	call	0x2c6	; 0x2c6 <init_characters>

	//Timer1 for scrolling screen
	

	//Prescaler 1024
	TCCR1B |= (1 << CS12) | (1 << CS10); 
     47a:	8e b5       	in	r24, 0x2e	; 46
     47c:	85 60       	ori	r24, 0x05	; 5
     47e:	8e bd       	out	0x2e, r24	; 46

    TCCR1A &= ~( (1 << WGM11) | (1 << WGM10) );
     480:	8f b5       	in	r24, 0x2f	; 47
     482:	8c 7f       	andi	r24, 0xFC	; 252
     484:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |=    (1 << WGM12);
     486:	8e b5       	in	r24, 0x2e	; 46
     488:	88 60       	ori	r24, 0x08	; 8
     48a:	8e bd       	out	0x2e, r24	; 46
    TCCR1B &=   ~(1 << WGM13);
     48c:	8e b5       	in	r24, 0x2e	; 46
     48e:	8f 7e       	andi	r24, 0xEF	; 239
     490:	8e bd       	out	0x2e, r24	; 46

    //Enable compare interrupts
    TIMSK |= (1 << OCIE1A);
     492:	87 b7       	in	r24, 0x37	; 55
     494:	80 61       	ori	r24, 0x10	; 16
     496:	87 bf       	out	0x37, r24	; 55

	OCR1AH = (speed >> 8);
     498:	80 91 ce 04 	lds	r24, 0x04CE
     49c:	90 91 cf 04 	lds	r25, 0x04CF
     4a0:	89 2f       	mov	r24, r25
     4a2:	99 0f       	add	r25, r25
     4a4:	99 0b       	sbc	r25, r25
     4a6:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = speed & 0xff;
     4a8:	80 91 ce 04 	lds	r24, 0x04CE
     4ac:	90 91 cf 04 	lds	r25, 0x04CF
     4b0:	8a bd       	out	0x2a, r24	; 42

    
	//Timer3 to increase level
	
	//Prescaler at 1024
	TCCR3B = (1 << CS12) | (1 << CS10); 
     4b2:	ea e8       	ldi	r30, 0x8A	; 138
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	85 e0       	ldi	r24, 0x05	; 5
     4b8:	80 83       	st	Z, r24
	

	TCCR3A &= ~( (1 << WGM11) | (1 << WGM10) );
     4ba:	ab e8       	ldi	r26, 0x8B	; 139
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	8c 91       	ld	r24, X
     4c0:	8c 7f       	andi	r24, 0xFC	; 252
     4c2:	8c 93       	st	X, r24
    TCCR3B |=    (1 << WGM12);
     4c4:	80 81       	ld	r24, Z
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	80 83       	st	Z, r24
    TCCR3B &=   ~(1 << WGM13);
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 7e       	andi	r24, 0xEF	; 239
     4ce:	80 83       	st	Z, r24

	// Enable compare interrupts
	ETIMSK |= (1<<OCIE3A); 
     4d0:	ed e7       	ldi	r30, 0x7D	; 125
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	80 61       	ori	r24, 0x10	; 16
     4d8:	80 83       	st	Z, r24
	
	//Set interrupt every second
	OCR3AH = 0x3D;
     4da:	8d e3       	ldi	r24, 0x3D	; 61
     4dc:	80 93 87 00 	sts	0x0087, r24
    OCR3AL = 0x09;
     4e0:	89 e0       	ldi	r24, 0x09	; 9
     4e2:	80 93 86 00 	sts	0x0086, r24
	
	//Make sound to start game
	init_sound_timers(start_game_sound, start_times);
     4e6:	8a e1       	ldi	r24, 0x1A	; 26
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	60 e6       	ldi	r22, 0x60	; 96
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	0e 94 11 09 	call	0x1222	; 0x1222 <init_sound_timers>


}
     4f2:	08 95       	ret

000004f4 <print_after_move>:

//Function called after moving the position
void print_after_move()
{
	int crash_value = verify_crash(main_obstacles,position);
     4f4:	8c ea       	ldi	r24, 0xAC	; 172
     4f6:	94 e0       	ldi	r25, 0x04	; 4
     4f8:	6a e9       	ldi	r22, 0x9A	; 154
     4fa:	74 e0       	ldi	r23, 0x04	; 4
     4fc:	0e 94 86 08 	call	0x110c	; 0x110c <verify_crash>
     500:	9c 01       	movw	r18, r24
	if(crash_value == 2) stop = 1;
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	91 05       	cpc	r25, r1
     506:	31 f4       	brne	.+12     	; 0x514 <print_after_move+0x20>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 d3 04 	sts	0x04D3, r25
     510:	80 93 d2 04 	sts	0x04D2, r24
	print(level, main_obstacles, position, crash_value);
     514:	80 91 ca 04 	lds	r24, 0x04CA
     518:	90 91 cb 04 	lds	r25, 0x04CB
     51c:	6c ea       	ldi	r22, 0xAC	; 172
     51e:	74 e0       	ldi	r23, 0x04	; 4
     520:	4a e9       	ldi	r20, 0x9A	; 154
     522:	54 e0       	ldi	r21, 0x04	; 4
     524:	0e 94 3e 07 	call	0xe7c	; 0xe7c <print>
}
     528:	08 95       	ret

0000052a <main>:

int main(void) 
{
     52a:	2f 92       	push	r2
     52c:	3f 92       	push	r3
     52e:	4f 92       	push	r4
     530:	5f 92       	push	r5
     532:	6f 92       	push	r6
     534:	7f 92       	push	r7
     536:	8f 92       	push	r8
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <main+0x26>
     550:	00 d0       	rcall	.+0      	; 0x552 <main+0x28>
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
	initialize();
     556:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <initialize>
	init_menu();
     55a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <init_menu>
	int changed_position_jump = 0;
	int changed_position_forward = 0;
	int changed_position_backward = 0;
	int changed_position_select = 0;
	int changed_position_up = 0;
	int changed_position_down = 0;
     55e:	ee 24       	eor	r14, r14
     560:	ff 24       	eor	r15, r15
	int changed_position_left = 0;
	int changed_position_jump = 0;
	int changed_position_forward = 0;
	int changed_position_backward = 0;
	int changed_position_select = 0;
	int changed_position_up = 0;
     562:	cc 24       	eor	r12, r12
     564:	dd 24       	eor	r13, r13
	int changed_position_right = 0;
	int changed_position_left = 0;
	int changed_position_jump = 0;
	int changed_position_forward = 0;
	int changed_position_backward = 0;
	int changed_position_select = 0;
     566:	1c 82       	std	Y+4, r1	; 0x04
     568:	1b 82       	std	Y+3, r1	; 0x03
	//Variables to avoid multiple presses of buttons
	int changed_position_right = 0;
	int changed_position_left = 0;
	int changed_position_jump = 0;
	int changed_position_forward = 0;
	int changed_position_backward = 0;
     56a:	1a 82       	std	Y+2, r1	; 0x02
     56c:	19 82       	std	Y+1, r1	; 0x01

	//Variables to avoid multiple presses of buttons
	int changed_position_right = 0;
	int changed_position_left = 0;
	int changed_position_jump = 0;
	int changed_position_forward = 0;
     56e:	22 24       	eor	r2, r2
     570:	33 24       	eor	r3, r3
	init_menu();

	//Variables to avoid multiple presses of buttons
	int changed_position_right = 0;
	int changed_position_left = 0;
	int changed_position_jump = 0;
     572:	44 24       	eor	r4, r4
     574:	55 24       	eor	r5, r5
	initialize();
	init_menu();

	//Variables to avoid multiple presses of buttons
	int changed_position_right = 0;
	int changed_position_left = 0;
     576:	00 e0       	ldi	r16, 0x00	; 0
     578:	10 e0       	ldi	r17, 0x00	; 0
{
	initialize();
	init_menu();

	//Variables to avoid multiple presses of buttons
	int changed_position_right = 0;
     57a:	88 24       	eor	r8, r8
     57c:	99 24       	eor	r9, r9
					{
						menu = 3;
						init_scores();
					
					}
					changed_position_select = 1;
     57e:	aa 24       	eor	r10, r10
     580:	bb 24       	eor	r11, r11
     582:	a3 94       	inc	r10
					changed_position_backward = 0;
				}
				else
				{
					if(changed_position_backward == 0){
						if(position[1] == 1 || position[1] == 3) //Left or right lane
     584:	0f 2e       	mov	r0, r31
     586:	fc e9       	ldi	r31, 0x9C	; 156
     588:	6f 2e       	mov	r6, r31
     58a:	f4 e0       	ldi	r31, 0x04	; 4
     58c:	7f 2e       	mov	r7, r31
     58e:	f0 2d       	mov	r31, r0
     590:	1a c0       	rjmp	.+52     	; 0x5c6 <main+0x9c>
			}

			//Select button
			if(PINA & (1<<PA2))
			{
				changed_position_select = 0;
     592:	1c 82       	std	Y+4, r1	; 0x04
     594:	1b 82       	std	Y+3, r1	; 0x03
     596:	17 c0       	rjmp	.+46     	; 0x5c6 <main+0x9c>
					{
						menu = 3;
						init_scores();
					
					}
					changed_position_select = 1;
     598:	bc 82       	std	Y+4, r11	; 0x04
     59a:	ab 82       	std	Y+3, r10	; 0x03
     59c:	14 c0       	rjmp	.+40     	; 0x5c6 <main+0x9c>
			}

			//Toggle acceleration
			if(PINA & (1<<PA2))
			{
				changed_position_select = 0;
     59e:	1c 82       	std	Y+4, r1	; 0x04
     5a0:	1b 82       	std	Y+3, r1	; 0x03
     5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <main+0x9c>
		else if(menu==3) //High Scores menu
		{
			//Move to Menu
			if(PINA & (1<<PA1))
			{
				changed_position_left = 0;
     5a4:	00 e0       	ldi	r16, 0x00	; 0
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <main+0x9c>
			}

			//Select button
			if(PINA & (1<<PA2))
			{
				changed_position_select = 0;
     5aa:	1c 82       	std	Y+4, r1	; 0x04
     5ac:	1b 82       	std	Y+3, r1	; 0x03
     5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <main+0x9c>
					else if(menu_scores ==2) //Start game
					{
						init_game();
						menu = 0;	
					}
					changed_position_select = 1;
     5b0:	bc 82       	std	Y+4, r11	; 0x04
     5b2:	ab 82       	std	Y+3, r10	; 0x03
     5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <main+0x9c>
			}

			//Select letter
			if(PINA & (1<<PA2))
			{
				changed_position_select = 0;
     5b6:	1c 82       	std	Y+4, r1	; 0x04
     5b8:	1b 82       	std	Y+3, r1	; 0x03
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <main+0x9c>
				}

				//Move backward
				if(PINA & (1<<PA3)||acceleration==0) //if acceleration disabled always true
				{
					changed_position_backward = 0;
     5bc:	1a 82       	std	Y+2, r1	; 0x02
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <main+0x9c>
     5c2:	1a 82       	std	Y+2, r1	; 0x02
     5c4:	19 82       	std	Y+1, r1	; 0x01
	int changed_position_down = 0;

	while (1) 
	{

		if(menu==1) //In Menu Screen
     5c6:	80 91 04 01 	lds	r24, 0x0104
     5ca:	90 91 05 01 	lds	r25, 0x0105
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <main+0xac>
     5d4:	60 c0       	rjmp	.+192    	; 0x696 <main+0x16c>
		{
			//Move to start
			if(PINA & (1<<PA1))
     5d6:	c9 99       	sbic	0x19, 1	; 25
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <main+0xbe>
			{
				changed_position_left = 0;
			}
			else
			{
				if(changed_position_left == 0){
     5da:	01 15       	cp	r16, r1
     5dc:	11 05       	cpc	r17, r1
     5de:	31 f4       	brne	.+12     	; 0x5ec <main+0xc2>
					menu_move_start();
     5e0:	0e 94 37 0a 	call	0x146e	; 0x146e <menu_move_start>
					changed_position_left = 1;
     5e4:	85 01       	movw	r16, r10
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <main+0xc2>
		if(menu==1) //In Menu Screen
		{
			//Move to start
			if(PINA & (1<<PA1))
			{
				changed_position_left = 0;
     5e8:	00 e0       	ldi	r16, 0x00	; 0
     5ea:	10 e0       	ldi	r17, 0x00	; 0
					changed_position_left = 1;
				}
			}

			//Move to settings
			if(PINA & (1<<PA3))
     5ec:	cb 99       	sbic	0x19, 3	; 25
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <main+0xd4>
			{
				changed_position_right = 0;
			}
			else
			{
				if(changed_position_right == 0){
     5f0:	81 14       	cp	r8, r1
     5f2:	91 04       	cpc	r9, r1
     5f4:	31 f4       	brne	.+12     	; 0x602 <main+0xd8>
					menu_move_settings();
     5f6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <menu_move_settings>
					changed_position_right = 1;
     5fa:	45 01       	movw	r8, r10
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <main+0xd8>
			}

			//Move to settings
			if(PINA & (1<<PA3))
			{
				changed_position_right = 0;
     5fe:	88 24       	eor	r8, r8
     600:	99 24       	eor	r9, r9
					changed_position_right = 1;
				}
			}
	
			//Move to start
			if(PINA & (1<<PA0))
     602:	c8 99       	sbic	0x19, 0	; 25
     604:	07 c0       	rjmp	.+14     	; 0x614 <main+0xea>
			{
				changed_position_up = 0;
			}
			else
			{
				if(changed_position_up == 0){
     606:	c1 14       	cp	r12, r1
     608:	d1 04       	cpc	r13, r1
     60a:	31 f4       	brne	.+12     	; 0x618 <main+0xee>
					menu_move_start();
     60c:	0e 94 37 0a 	call	0x146e	; 0x146e <menu_move_start>
					changed_position_up = 1;
     610:	65 01       	movw	r12, r10
     612:	02 c0       	rjmp	.+4      	; 0x618 <main+0xee>
			}
	
			//Move to start
			if(PINA & (1<<PA0))
			{
				changed_position_up = 0;
     614:	cc 24       	eor	r12, r12
     616:	dd 24       	eor	r13, r13
					changed_position_up = 1;
				}
			}

			//Move to High Scores
			if(PINA & (1<<PA4))
     618:	cc 99       	sbic	0x19, 4	; 25
     61a:	07 c0       	rjmp	.+14     	; 0x62a <main+0x100>
			{
				changed_position_down = 0;
			}
			else
			{
				if(changed_position_down == 0){
     61c:	e1 14       	cp	r14, r1
     61e:	f1 04       	cpc	r15, r1
     620:	31 f4       	brne	.+12     	; 0x62e <main+0x104>
					menu_move_scores();
     622:	0e 94 24 0a 	call	0x1448	; 0x1448 <menu_move_scores>
					changed_position_down = 1;
     626:	75 01       	movw	r14, r10
     628:	02 c0       	rjmp	.+4      	; 0x62e <main+0x104>
			}

			//Move to High Scores
			if(PINA & (1<<PA4))
			{
				changed_position_down = 0;
     62a:	ee 24       	eor	r14, r14
     62c:	ff 24       	eor	r15, r15
					changed_position_down = 1;
				}
			}

			//Select button
			if(PINA & (1<<PA2))
     62e:	ca 99       	sbic	0x19, 2	; 25
     630:	b0 cf       	rjmp	.-160    	; 0x592 <main+0x68>
			{
				changed_position_select = 0;
			}
			else
			{
				if(changed_position_select == 0){
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	31 f6       	brne	.-116    	; 0x5c6 <main+0x9c>
					if(start == 1) //Start game
     63a:	80 91 08 01 	lds	r24, 0x0108
     63e:	90 91 09 01 	lds	r25, 0x0109
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	91 05       	cpc	r25, r1
     646:	51 f4       	brne	.+20     	; 0x65c <main+0x132>
					{
						menu = 0;
     648:	10 92 05 01 	sts	0x0105, r1
     64c:	10 92 04 01 	sts	0x0104, r1
						init_game();
     650:	0e 94 09 02 	call	0x412	; 0x412 <init_game>
					{
						menu = 3;
						init_scores();
					
					}
					changed_position_select = 1;
     654:	bc 82       	std	Y+4, r11	; 0x04
     656:	ab 82       	std	Y+3, r10	; 0x03
				if(changed_position_select == 0){
					if(start == 1) //Start game
					{
						menu = 0;
						init_game();
						changed_position_jump = 1;
     658:	25 01       	movw	r4, r10
     65a:	b5 cf       	rjmp	.-150    	; 0x5c6 <main+0x9c>
					}
					else if(start == 2) //Start settings
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	59 f4       	brne	.+22     	; 0x678 <main+0x14e>
					{
						menu = 2;
     662:	e2 e0       	ldi	r30, 0x02	; 2
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	f0 93 05 01 	sts	0x0105, r31
     66a:	e0 93 04 01 	sts	0x0104, r30
						init_settings();
     66e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <init_settings>
					{
						menu = 3;
						init_scores();
					
					}
					changed_position_select = 1;
     672:	bc 82       	std	Y+4, r11	; 0x04
     674:	ab 82       	std	Y+3, r10	; 0x03
     676:	a7 cf       	rjmp	.-178    	; 0x5c6 <main+0x9c>
					else if(start == 2) //Start settings
					{
						menu = 2;
						init_settings();
					}
					else if(start == 3) //Start High Scores
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	91 05       	cpc	r25, r1
     67c:	09 f0       	breq	.+2      	; 0x680 <main+0x156>
     67e:	8c cf       	rjmp	.-232    	; 0x598 <main+0x6e>
					{
						menu = 3;
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	90 93 05 01 	sts	0x0105, r25
     688:	80 93 04 01 	sts	0x0104, r24
						init_scores();
     68c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <init_scores>
					
					}
					changed_position_select = 1;
     690:	bc 82       	std	Y+4, r11	; 0x04
     692:	ab 82       	std	Y+3, r10	; 0x03
     694:	98 cf       	rjmp	.-208    	; 0x5c6 <main+0x9c>
				
				}
			}
		}
		else if(menu==2) //Settings menu
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	91 05       	cpc	r25, r1
     69a:	d1 f4       	brne	.+52     	; 0x6d0 <main+0x1a6>
		{
			//Move to Menu
			if(PINA & (1<<PA1))
     69c:	c9 99       	sbic	0x19, 1	; 25
     69e:	0a c0       	rjmp	.+20     	; 0x6b4 <main+0x18a>
			{
				changed_position_left = 0;
			}
			else
			{
				if(changed_position_left == 0){
     6a0:	01 15       	cp	r16, r1
     6a2:	11 05       	cpc	r17, r1
     6a4:	49 f4       	brne	.+18     	; 0x6b8 <main+0x18e>
					init_menu();
     6a6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <init_menu>
					menu = 1;
     6aa:	b0 92 05 01 	sts	0x0105, r11
     6ae:	a0 92 04 01 	sts	0x0104, r10
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <main+0x18e>
		else if(menu==2) //Settings menu
		{
			//Move to Menu
			if(PINA & (1<<PA1))
			{
				changed_position_left = 0;
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	10 e0       	ldi	r17, 0x00	; 0
					menu = 1;
				}
			}

			//Toggle acceleration
			if(PINA & (1<<PA2))
     6b8:	ca 99       	sbic	0x19, 2	; 25
     6ba:	71 cf       	rjmp	.-286    	; 0x59e <main+0x74>
			{
				changed_position_select = 0;
			}
			else
			{
				if(changed_position_select == 0){
     6bc:	eb 81       	ldd	r30, Y+3	; 0x03
     6be:	fc 81       	ldd	r31, Y+4	; 0x04
     6c0:	30 97       	sbiw	r30, 0x00	; 0
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <main+0x19c>
     6c4:	80 cf       	rjmp	.-256    	; 0x5c6 <main+0x9c>
					toggle_acceleration();
     6c6:	0e 94 3f 0b 	call	0x167e	; 0x167e <toggle_acceleration>
					changed_position_select = 1;
     6ca:	bc 82       	std	Y+4, r11	; 0x04
     6cc:	ab 82       	std	Y+3, r10	; 0x03
     6ce:	7b cf       	rjmp	.-266    	; 0x5c6 <main+0x9c>
				}
			}
		}
		else if(menu==3) //High Scores menu
     6d0:	83 30       	cpi	r24, 0x03	; 3
     6d2:	91 05       	cpc	r25, r1
     6d4:	69 f4       	brne	.+26     	; 0x6f0 <main+0x1c6>
		{
			//Move to Menu
			if(PINA & (1<<PA1))
     6d6:	c9 99       	sbic	0x19, 1	; 25
     6d8:	65 cf       	rjmp	.-310    	; 0x5a4 <main+0x7a>
			{
				changed_position_left = 0;
			}
			else
			{
				if(changed_position_left == 0){
     6da:	01 15       	cp	r16, r1
     6dc:	11 05       	cpc	r17, r1
     6de:	09 f0       	breq	.+2      	; 0x6e2 <main+0x1b8>
     6e0:	72 cf       	rjmp	.-284    	; 0x5c6 <main+0x9c>
					init_menu();
     6e2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <init_menu>
					menu = 1;
     6e6:	b0 92 05 01 	sts	0x0105, r11
     6ea:	a0 92 04 01 	sts	0x0104, r10
     6ee:	6b cf       	rjmp	.-298    	; 0x5c6 <main+0x9c>
				}
			}
		}
		else if(menu==4) //Game over menu
     6f0:	84 30       	cpi	r24, 0x04	; 4
     6f2:	91 05       	cpc	r25, r1
     6f4:	f1 f5       	brne	.+124    	; 0x772 <main+0x248>
		{
			//Move to Menu
			if(PINA & (1<<PA0))
     6f6:	c8 99       	sbic	0x19, 0	; 25
     6f8:	07 c0       	rjmp	.+14     	; 0x708 <main+0x1de>
			{
				changed_position_up = 0;
			}
			else
			{
				if(changed_position_up == 0){
     6fa:	c1 14       	cp	r12, r1
     6fc:	d1 04       	cpc	r13, r1
     6fe:	31 f4       	brne	.+12     	; 0x70c <main+0x1e2>
					menu_scores_move_menu();
     700:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <menu_scores_move_menu>
					changed_position_up = 1;
     704:	65 01       	movw	r12, r10
     706:	02 c0       	rjmp	.+4      	; 0x70c <main+0x1e2>
		else if(menu==4) //Game over menu
		{
			//Move to Menu
			if(PINA & (1<<PA0))
			{
				changed_position_up = 0;
     708:	cc 24       	eor	r12, r12
     70a:	dd 24       	eor	r13, r13
					changed_position_up = 1;
				}
			}

			//Move to Replay
			if(PINA & (1<<PA4))
     70c:	cc 99       	sbic	0x19, 4	; 25
     70e:	07 c0       	rjmp	.+14     	; 0x71e <main+0x1f4>
			{
				changed_position_down = 0;
			}
			else
			{
				if(changed_position_down == 0){
     710:	e1 14       	cp	r14, r1
     712:	f1 04       	cpc	r15, r1
     714:	31 f4       	brne	.+12     	; 0x722 <main+0x1f8>
					menu_scores_move_replay();
     716:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <menu_scores_move_replay>
					changed_position_down = 1;
     71a:	75 01       	movw	r14, r10
     71c:	02 c0       	rjmp	.+4      	; 0x722 <main+0x1f8>
			}

			//Move to Replay
			if(PINA & (1<<PA4))
			{
				changed_position_down = 0;
     71e:	ee 24       	eor	r14, r14
     720:	ff 24       	eor	r15, r15
					changed_position_down = 1;
				}
			}

			//Select button
			if(PINA & (1<<PA2))
     722:	ca 99       	sbic	0x19, 2	; 25
     724:	42 cf       	rjmp	.-380    	; 0x5aa <main+0x80>
			{
				changed_position_select = 0;
			}
			else
			{
				if(changed_position_select == 0){
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	09 f0       	breq	.+2      	; 0x730 <main+0x206>
     72e:	4b cf       	rjmp	.-362    	; 0x5c6 <main+0x9c>
					if(menu_scores ==1) //Start main menu
     730:	80 91 06 01 	lds	r24, 0x0106
     734:	90 91 07 01 	lds	r25, 0x0107
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	91 05       	cpc	r25, r1
     73c:	69 f4       	brne	.+26     	; 0x758 <main+0x22e>
					{
						init_menu();
     73e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <init_menu>
						menu = 1;
     742:	b0 92 05 01 	sts	0x0105, r11
     746:	a0 92 04 01 	sts	0x0104, r10
						start = 0;
     74a:	10 92 09 01 	sts	0x0109, r1
     74e:	10 92 08 01 	sts	0x0108, r1
					else if(menu_scores ==2) //Start game
					{
						init_game();
						menu = 0;	
					}
					changed_position_select = 1;
     752:	bc 82       	std	Y+4, r11	; 0x04
     754:	ab 82       	std	Y+3, r10	; 0x03
     756:	37 cf       	rjmp	.-402    	; 0x5c6 <main+0x9c>
					{
						init_menu();
						menu = 1;
						start = 0;
					}
					else if(menu_scores ==2) //Start game
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	91 05       	cpc	r25, r1
     75c:	09 f0       	breq	.+2      	; 0x760 <main+0x236>
     75e:	28 cf       	rjmp	.-432    	; 0x5b0 <main+0x86>
					{
						init_game();
     760:	0e 94 09 02 	call	0x412	; 0x412 <init_game>
						menu = 0;	
     764:	10 92 05 01 	sts	0x0105, r1
     768:	10 92 04 01 	sts	0x0104, r1
					}
					changed_position_select = 1;
     76c:	bc 82       	std	Y+4, r11	; 0x04
     76e:	ab 82       	std	Y+3, r10	; 0x03
     770:	2a cf       	rjmp	.-428    	; 0x5c6 <main+0x9c>
				}
			}
		}
		else if(menu==5) //New High Score menu
     772:	85 30       	cpi	r24, 0x05	; 5
     774:	91 05       	cpc	r25, r1
     776:	11 f5       	brne	.+68     	; 0x7bc <main+0x292>
		{
			//Increase letter
			if(PINA & (1<<PA0))
     778:	c8 99       	sbic	0x19, 0	; 25
     77a:	07 c0       	rjmp	.+14     	; 0x78a <main+0x260>
			{
				changed_position_up = 0;
			}
			else
			{
				if(changed_position_up == 0){
     77c:	c1 14       	cp	r12, r1
     77e:	d1 04       	cpc	r13, r1
     780:	31 f4       	brne	.+12     	; 0x78e <main+0x264>
					increase_letter();
     782:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <increase_letter>
					changed_position_up = 1;
     786:	65 01       	movw	r12, r10
     788:	02 c0       	rjmp	.+4      	; 0x78e <main+0x264>
		else if(menu==5) //New High Score menu
		{
			//Increase letter
			if(PINA & (1<<PA0))
			{
				changed_position_up = 0;
     78a:	cc 24       	eor	r12, r12
     78c:	dd 24       	eor	r13, r13
					changed_position_up = 1;
				}
			}

			//Decrease letter
			if(PINA & (1<<PA4))
     78e:	cc 99       	sbic	0x19, 4	; 25
     790:	07 c0       	rjmp	.+14     	; 0x7a0 <main+0x276>
			{
				changed_position_down = 0;
			}
			else
			{
				if(changed_position_down == 0){
     792:	e1 14       	cp	r14, r1
     794:	f1 04       	cpc	r15, r1
     796:	31 f4       	brne	.+12     	; 0x7a4 <main+0x27a>
					decrease_letter();
     798:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <decrease_letter>
					changed_position_down = 1;
     79c:	75 01       	movw	r14, r10
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <main+0x27a>
			}

			//Decrease letter
			if(PINA & (1<<PA4))
			{
				changed_position_down = 0;
     7a0:	ee 24       	eor	r14, r14
     7a2:	ff 24       	eor	r15, r15
					changed_position_down = 1;
				}
			}

			//Select letter
			if(PINA & (1<<PA2))
     7a4:	ca 99       	sbic	0x19, 2	; 25
     7a6:	07 cf       	rjmp	.-498    	; 0x5b6 <main+0x8c>
			{
				changed_position_select = 0;
			}
			else
			{
				if(changed_position_select == 0){
     7a8:	eb 81       	ldd	r30, Y+3	; 0x03
     7aa:	fc 81       	ldd	r31, Y+4	; 0x04
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <main+0x288>
     7b0:	0a cf       	rjmp	.-492    	; 0x5c6 <main+0x9c>
					select_letter();
     7b2:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <select_letter>
					changed_position_select = 1;
     7b6:	bc 82       	std	Y+4, r11	; 0x04
     7b8:	ab 82       	std	Y+3, r10	; 0x03
     7ba:	05 cf       	rjmp	.-502    	; 0x5c6 <main+0x9c>
			}

		}
		else //GAME
		{
			if(stop == 0) //The game is running
     7bc:	80 91 d2 04 	lds	r24, 0x04D2
     7c0:	90 91 d3 04 	lds	r25, 0x04D3
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	09 f0       	breq	.+2      	; 0x7ca <main+0x2a0>
     7c8:	fe ce       	rjmp	.-516    	; 0x5c6 <main+0x9c>
			{
				//Move right
				if(PINA & (1<<PA0))
     7ca:	c8 99       	sbic	0x19, 0	; 25
     7cc:	1f c0       	rjmp	.+62     	; 0x80c <main+0x2e2>
				{
					changed_position_right = 0;
				}
				else
				{
					if(changed_position_right == 0)
     7ce:	81 14       	cp	r8, r1
     7d0:	91 04       	cpc	r9, r1
     7d2:	f1 f4       	brne	.+60     	; 0x810 <main+0x2e6>
					{
						if(position[1] == 2) //Left lane jumping
     7d4:	f3 01       	movw	r30, r6
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	91 05       	cpc	r25, r1
     7de:	41 f4       	brne	.+16     	; 0x7f0 <main+0x2c6>
						{
							changed_position_right = 1;
							position[1] = 4; //Right lane jumping
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	91 83       	std	Z+1, r25	; 0x01
     7e6:	80 83       	st	Z, r24
							print_after_move();
     7e8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
				{
					if(changed_position_right == 0)
					{
						if(position[1] == 2) //Left lane jumping
						{
							changed_position_right = 1;
     7ec:	45 01       	movw	r8, r10
     7ee:	10 c0       	rjmp	.+32     	; 0x810 <main+0x2e6>
							position[1] = 4; //Right lane jumping
							print_after_move();
						}
						else if(position[1] == 1) //Left lane
     7f0:	f3 01       	movw	r30, r6
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	91 05       	cpc	r25, r1
     7fa:	51 f4       	brne	.+20     	; 0x810 <main+0x2e6>
						{
							changed_position_right = 1;
							position[1] = 3; //Right lane
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	91 83       	std	Z+1, r25	; 0x01
     802:	80 83       	st	Z, r24
							print_after_move();
     804:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
							position[1] = 4; //Right lane jumping
							print_after_move();
						}
						else if(position[1] == 1) //Left lane
						{
							changed_position_right = 1;
     808:	45 01       	movw	r8, r10
     80a:	02 c0       	rjmp	.+4      	; 0x810 <main+0x2e6>
			if(stop == 0) //The game is running
			{
				//Move right
				if(PINA & (1<<PA0))
				{
					changed_position_right = 0;
     80c:	88 24       	eor	r8, r8
     80e:	99 24       	eor	r9, r9
						}
				
					}
				}
				//Jump
				if(PINA & (1<<PA2))
     810:	ca 99       	sbic	0x19, 2	; 25
     812:	27 c0       	rjmp	.+78     	; 0x862 <main+0x338>
				{
					changed_position_jump = 0;
				}
				else
				{
					if(changed_position_jump == 0)
     814:	41 14       	cp	r4, r1
     816:	51 04       	cpc	r5, r1
     818:	31 f5       	brne	.+76     	; 0x866 <main+0x33c>
					{
						if(position[1] == 1) //Left lane
     81a:	f3 01       	movw	r30, r6
     81c:	80 81       	ld	r24, Z
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	91 05       	cpc	r25, r1
     824:	61 f4       	brne	.+24     	; 0x83e <main+0x314>
						{
							changed_position_jump = 1;
							position[1] = 2; //Left lane jumping
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	80 83       	st	Z, r24
							jumping = 1; //Initialize jump
     82e:	b0 92 d1 04 	sts	0x04D1, r11
     832:	a0 92 d0 04 	sts	0x04D0, r10
							print_after_move();
     836:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
				{
					if(changed_position_jump == 0)
					{
						if(position[1] == 1) //Left lane
						{
							changed_position_jump = 1;
     83a:	25 01       	movw	r4, r10
     83c:	14 c0       	rjmp	.+40     	; 0x866 <main+0x33c>
							position[1] = 2; //Left lane jumping
							jumping = 1; //Initialize jump
							print_after_move();
						}
						else if(position[1] == 3) //Right lane
     83e:	f3 01       	movw	r30, r6
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	91 05       	cpc	r25, r1
     848:	71 f4       	brne	.+28     	; 0x866 <main+0x33c>
						{
							changed_position_jump = 1;
							position[1] = 4; //Right lane jumping
     84a:	84 e0       	ldi	r24, 0x04	; 4
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	91 83       	std	Z+1, r25	; 0x01
     850:	80 83       	st	Z, r24
							jumping = 1; //Initialize jump
     852:	b0 92 d1 04 	sts	0x04D1, r11
     856:	a0 92 d0 04 	sts	0x04D0, r10
							print_after_move();
     85a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
							jumping = 1; //Initialize jump
							print_after_move();
						}
						else if(position[1] == 3) //Right lane
						{
							changed_position_jump = 1;
     85e:	25 01       	movw	r4, r10
     860:	02 c0       	rjmp	.+4      	; 0x866 <main+0x33c>
					}
				}
				//Jump
				if(PINA & (1<<PA2))
				{
					changed_position_jump = 0;
     862:	44 24       	eor	r4, r4
     864:	55 24       	eor	r5, r5
					}
				}
    

				//Move left
				if(PINA & (1<<PA4))
     866:	cc 99       	sbic	0x19, 4	; 25
     868:	1d c0       	rjmp	.+58     	; 0x8a4 <main+0x37a>
				{
					changed_position_left = 0;
				}
				else
				{
					if(changed_position_left == 0)
     86a:	01 15       	cp	r16, r1
     86c:	11 05       	cpc	r17, r1
     86e:	e1 f4       	brne	.+56     	; 0x8a8 <main+0x37e>
					{
						if(position[1] ==4) //Right lane jumping
     870:	f3 01       	movw	r30, r6
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	91 05       	cpc	r25, r1
     87a:	41 f4       	brne	.+16     	; 0x88c <main+0x362>
						{
							changed_position_left = 1;
							position[1] = 2; //Left lane jumping
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	91 83       	std	Z+1, r25	; 0x01
     882:	80 83       	st	Z, r24
							print_after_move();
     884:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
				{
					if(changed_position_left == 0)
					{
						if(position[1] ==4) //Right lane jumping
						{
							changed_position_left = 1;
     888:	85 01       	movw	r16, r10
     88a:	0e c0       	rjmp	.+28     	; 0x8a8 <main+0x37e>
							position[1] = 2; //Left lane jumping
							print_after_move();
						}
						else if(position[1] == 3) //Right lane
     88c:	f3 01       	movw	r30, r6
     88e:	80 81       	ld	r24, Z
     890:	91 81       	ldd	r25, Z+1	; 0x01
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	91 05       	cpc	r25, r1
     896:	41 f4       	brne	.+16     	; 0x8a8 <main+0x37e>
						{
							changed_position_left = 1;
							position[1] = 1; //Left lane
     898:	b1 82       	std	Z+1, r11	; 0x01
     89a:	a0 82       	st	Z, r10
							print_after_move();
     89c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
							position[1] = 2; //Left lane jumping
							print_after_move();
						}
						else if(position[1] == 3) //Right lane
						{
							changed_position_left = 1;
     8a0:	85 01       	movw	r16, r10
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <main+0x37e>
    

				//Move left
				if(PINA & (1<<PA4))
				{
					changed_position_left = 0;
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
		
				//Move forward
				if(PINA & (1<<PA1)||acceleration==0) //if acceleration disabled always true
     8a8:	c9 99       	sbic	0x19, 1	; 25
     8aa:	24 c0       	rjmp	.+72     	; 0x8f4 <main+0x3ca>
     8ac:	80 91 0a 01 	lds	r24, 0x010A
     8b0:	90 91 0b 01 	lds	r25, 0x010B
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	09 f1       	breq	.+66     	; 0x8fa <main+0x3d0>
				{
					changed_position_forward = 0;
				}
				else
				{
					if(changed_position_forward == 0){
     8b8:	21 14       	cp	r2, r1
     8ba:	31 04       	cpc	r3, r1
     8bc:	01 f5       	brne	.+64     	; 0x8fe <main+0x3d4>
						if(position[1] == 1 || position[1] == 3) //Left or right lane
     8be:	f3 01       	movw	r30, r6
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	91 05       	cpc	r25, r1
     8c8:	29 f0       	breq	.+10     	; 0x8d4 <main+0x3aa>
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	83 30       	cpi	r24, 0x03	; 3
     8d0:	91 05       	cpc	r25, r1
     8d2:	a9 f4       	brne	.+42     	; 0x8fe <main+0x3d4>
						{
							if(position[0]>0) //Not in the top
     8d4:	ea e9       	ldi	r30, 0x9A	; 154
     8d6:	f4 e0       	ldi	r31, 0x04	; 4
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	18 16       	cp	r1, r24
     8de:	19 06       	cpc	r1, r25
     8e0:	74 f4       	brge	.+28     	; 0x8fe <main+0x3d4>
							{
								changed_position_forward = 1;
								position[0] = position[0] - 1;
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	91 83       	std	Z+1, r25	; 0x01
     8ea:	80 83       	st	Z, r24
								print_after_move();
     8ec:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
					if(changed_position_forward == 0){
						if(position[1] == 1 || position[1] == 3) //Left or right lane
						{
							if(position[0]>0) //Not in the top
							{
								changed_position_forward = 1;
     8f0:	15 01       	movw	r2, r10
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <main+0x3d4>
				}
		
				//Move forward
				if(PINA & (1<<PA1)||acceleration==0) //if acceleration disabled always true
				{
					changed_position_forward = 0;
     8f4:	22 24       	eor	r2, r2
     8f6:	33 24       	eor	r3, r3
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <main+0x3d4>
     8fa:	22 24       	eor	r2, r2
     8fc:	33 24       	eor	r3, r3
						}
					}
				}

				//Move backward
				if(PINA & (1<<PA3)||acceleration==0) //if acceleration disabled always true
     8fe:	cb 99       	sbic	0x19, 3	; 25
     900:	5d ce       	rjmp	.-838    	; 0x5bc <main+0x92>
     902:	80 91 0a 01 	lds	r24, 0x010A
     906:	90 91 0b 01 	lds	r25, 0x010B
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	09 f4       	brne	.+2      	; 0x910 <main+0x3e6>
     90e:	59 ce       	rjmp	.-846    	; 0x5c2 <main+0x98>
				{
					changed_position_backward = 0;
				}
				else
				{
					if(changed_position_backward == 0){
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	09 f0       	breq	.+2      	; 0x91a <main+0x3f0>
     918:	56 ce       	rjmp	.-852    	; 0x5c6 <main+0x9c>
						if(position[1] == 1 || position[1] == 3) //Left or right lane
     91a:	f3 01       	movw	r30, r6
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	91 05       	cpc	r25, r1
     924:	31 f0       	breq	.+12     	; 0x932 <main+0x408>
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	83 30       	cpi	r24, 0x03	; 3
     92c:	91 05       	cpc	r25, r1
     92e:	09 f0       	breq	.+2      	; 0x932 <main+0x408>
     930:	4a ce       	rjmp	.-876    	; 0x5c6 <main+0x9c>
						{
							if(position[0] < MAX_OBSTACLES -1) //Not in the bottom
     932:	ea e9       	ldi	r30, 0x9A	; 154
     934:	f4 e0       	ldi	r31, 0x04	; 4
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	8e 30       	cpi	r24, 0x0E	; 14
     93c:	91 05       	cpc	r25, r1
     93e:	0c f0       	brlt	.+2      	; 0x942 <main+0x418>
     940:	42 ce       	rjmp	.-892    	; 0x5c6 <main+0x9c>
							{
								changed_position_backward = 1;
								position[0] = position[0] + 1;
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	80 83       	st	Z, r24
								print_after_move();
     94c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <print_after_move>
					if(changed_position_backward == 0){
						if(position[1] == 1 || position[1] == 3) //Left or right lane
						{
							if(position[0] < MAX_OBSTACLES -1) //Not in the bottom
							{
								changed_position_backward = 1;
     950:	ba 82       	std	Y+2, r11	; 0x02
     952:	a9 82       	std	Y+1, r10	; 0x01
     954:	38 ce       	rjmp	.-912    	; 0x5c6 <main+0x9c>

00000956 <increase_speed>:

//Adjust scrolling timer for new speed
void increase_speed()
{
	
	speed = speed * increase_rate;
     956:	60 91 ce 04 	lds	r22, 0x04CE
     95a:	70 91 cf 04 	lds	r23, 0x04CF
     95e:	88 27       	eor	r24, r24
     960:	77 fd       	sbrc	r23, 7
     962:	80 95       	com	r24
     964:	98 2f       	mov	r25, r24
     966:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__floatsisf>
     96a:	20 91 00 01 	lds	r18, 0x0100
     96e:	30 91 01 01 	lds	r19, 0x0101
     972:	40 91 02 01 	lds	r20, 0x0102
     976:	50 91 03 01 	lds	r21, 0x0103
     97a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__mulsf3>
     97e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__fixsfsi>
     982:	70 93 cf 04 	sts	0x04CF, r23
     986:	60 93 ce 04 	sts	0x04CE, r22

	OCR1AH = (speed >> 8);
     98a:	80 91 ce 04 	lds	r24, 0x04CE
     98e:	90 91 cf 04 	lds	r25, 0x04CF
     992:	89 2f       	mov	r24, r25
     994:	99 0f       	add	r25, r25
     996:	99 0b       	sbc	r25, r25
     998:	8b bd       	out	0x2b, r24	; 43
    OCR1AL = speed & 0xff;
     99a:	80 91 ce 04 	lds	r24, 0x04CE
     99e:	90 91 cf 04 	lds	r25, 0x04CF
     9a2:	8a bd       	out	0x2a, r24	; 42
	


}
     9a4:	08 95       	ret

000009a6 <reset_speed>:

void reset_speed()
{
	speed = 23437;
     9a6:	8d e8       	ldi	r24, 0x8D	; 141
     9a8:	9b e5       	ldi	r25, 0x5B	; 91
     9aa:	90 93 cf 04 	sts	0x04CF, r25
     9ae:	80 93 ce 04 	sts	0x04CE, r24

	OCR1AH = (speed >> 8);
     9b2:	80 91 ce 04 	lds	r24, 0x04CE
     9b6:	90 91 cf 04 	lds	r25, 0x04CF
     9ba:	89 2f       	mov	r24, r25
     9bc:	99 0f       	add	r25, r25
     9be:	99 0b       	sbc	r25, r25
     9c0:	8b bd       	out	0x2b, r24	; 43
    OCR1AL = speed & 0xff;
     9c2:	80 91 ce 04 	lds	r24, 0x04CE
     9c6:	90 91 cf 04 	lds	r25, 0x04CF
     9ca:	8a bd       	out	0x2a, r24	; 42
}
     9cc:	08 95       	ret

000009ce <__vector_12>:

//Scroll screen
ISR(TIMER1_COMPA_vect) {
     9ce:	1f 92       	push	r1
     9d0:	0f 92       	push	r0
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	0f 92       	push	r0
     9d6:	0b b6       	in	r0, 0x3b	; 59
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31

	if(stop ==0) //If game running
     9f4:	80 91 d2 04 	lds	r24, 0x04D2
     9f8:	90 91 d3 04 	lds	r25, 0x04D3
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__vector_12+0x34>
     a00:	69 c0       	rjmp	.+210    	; 0xad4 <__vector_12+0x106>
	{
		int *p_obs = create_obstacle(main_obstacles);
     a02:	8c ea       	ldi	r24, 0xAC	; 172
     a04:	94 e0       	ldi	r25, 0x04	; 4
     a06:	0e 94 20 08 	call	0x1040	; 0x1040 <create_obstacle>
     a0a:	e8 2f       	mov	r30, r24
     a0c:	f9 2f       	mov	r31, r25
		for(int i = 0; i<MAX_OBSTACLES;i++)
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
		{
			main_obstacles[i] = *(p_obs+i);
     a12:	4c ea       	ldi	r20, 0xAC	; 172
     a14:	54 e0       	ldi	r21, 0x04	; 4
     a16:	21 91       	ld	r18, Z+
     a18:	31 91       	ld	r19, Z+
     a1a:	dc 01       	movw	r26, r24
     a1c:	aa 0f       	add	r26, r26
     a1e:	bb 1f       	adc	r27, r27
     a20:	a4 0f       	add	r26, r20
     a22:	b5 1f       	adc	r27, r21
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	3c 93       	st	X, r19
     a28:	2e 93       	st	-X, r18
ISR(TIMER1_COMPA_vect) {

	if(stop ==0) //If game running
	{
		int *p_obs = create_obstacle(main_obstacles);
		for(int i = 0; i<MAX_OBSTACLES;i++)
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	8f 30       	cpi	r24, 0x0F	; 15
     a2e:	91 05       	cpc	r25, r1
     a30:	91 f7       	brne	.-28     	; 0xa16 <__vector_12+0x48>
		{
			main_obstacles[i] = *(p_obs+i);
		}
		//If jumping, count two scrolls and land the car
		if(jumping >=1)
     a32:	80 91 d0 04 	lds	r24, 0x04D0
     a36:	90 91 d1 04 	lds	r25, 0x04D1
     a3a:	18 16       	cp	r1, r24
     a3c:	19 06       	cpc	r1, r25
     a3e:	84 f5       	brge	.+96     	; 0xaa0 <__vector_12+0xd2>
		{
			if(jumping == 2)
     a40:	80 91 d0 04 	lds	r24, 0x04D0
     a44:	90 91 d1 04 	lds	r25, 0x04D1
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	91 05       	cpc	r25, r1
     a4c:	01 f5       	brne	.+64     	; 0xa8e <__vector_12+0xc0>
			{
				if(position[1] == 2)
     a4e:	80 91 9c 04 	lds	r24, 0x049C
     a52:	90 91 9d 04 	lds	r25, 0x049D
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	91 05       	cpc	r25, r1
     a5a:	39 f4       	brne	.+14     	; 0xa6a <__vector_12+0x9c>
				{
					position[1] = 1;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 9d 04 	sts	0x049D, r25
     a64:	80 93 9c 04 	sts	0x049C, r24
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <__vector_12+0xb6>
				}
				else if(position[1] == 4)
     a6a:	80 91 9c 04 	lds	r24, 0x049C
     a6e:	90 91 9d 04 	lds	r25, 0x049D
     a72:	84 30       	cpi	r24, 0x04	; 4
     a74:	91 05       	cpc	r25, r1
     a76:	31 f4       	brne	.+12     	; 0xa84 <__vector_12+0xb6>
				{
					position[1] = 3;
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	90 93 9d 04 	sts	0x049D, r25
     a80:	80 93 9c 04 	sts	0x049C, r24
				}
				jumping = 0;
     a84:	10 92 d1 04 	sts	0x04D1, r1
     a88:	10 92 d0 04 	sts	0x04D0, r1
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <__vector_12+0xd2>
			}
			else
			{
				jumping++;
     a8e:	80 91 d0 04 	lds	r24, 0x04D0
     a92:	90 91 d1 04 	lds	r25, 0x04D1
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	90 93 d1 04 	sts	0x04D1, r25
     a9c:	80 93 d0 04 	sts	0x04D0, r24
			}
			
		}		

		int crash_value = verify_crash(main_obstacles,position);
     aa0:	8c ea       	ldi	r24, 0xAC	; 172
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	6a e9       	ldi	r22, 0x9A	; 154
     aa6:	74 e0       	ldi	r23, 0x04	; 4
     aa8:	0e 94 86 08 	call	0x110c	; 0x110c <verify_crash>
     aac:	9c 01       	movw	r18, r24
		if(crash_value == 2)
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	91 05       	cpc	r25, r1
     ab2:	31 f4       	brne	.+12     	; 0xac0 <__vector_12+0xf2>
		{
			stop = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	90 93 d3 04 	sts	0x04D3, r25
     abc:	80 93 d2 04 	sts	0x04D2, r24
		}
		print(level, main_obstacles, position, crash_value);
     ac0:	80 91 ca 04 	lds	r24, 0x04CA
     ac4:	90 91 cb 04 	lds	r25, 0x04CB
     ac8:	6c ea       	ldi	r22, 0xAC	; 172
     aca:	74 e0       	ldi	r23, 0x04	; 4
     acc:	4a e9       	ldi	r20, 0x9A	; 154
     ace:	54 e0       	ldi	r21, 0x04	; 4
     ad0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <print>
	}
	
	
}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0b be       	out	0x3b, r0	; 59
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_26>:

//Count for increase of level
ISR(TIMER3_COMPA_vect) {
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	0b b6       	in	r0, 0x3b	; 59
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31

	if(stop == 0) //if game running
     b20:	80 91 d2 04 	lds	r24, 0x04D2
     b24:	90 91 d3 04 	lds	r25, 0x04D3
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	71 f5       	brne	.+92     	; 0xb88 <__vector_26+0x8e>
	{

		system_timer_count++;
     b2c:	80 91 cc 04 	lds	r24, 0x04CC
     b30:	90 91 cd 04 	lds	r25, 0x04CD
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	90 93 cd 04 	sts	0x04CD, r25
     b3a:	80 93 cc 04 	sts	0x04CC, r24
	
		if(system_timer_count % INPUT_KEY_TIMEOUT == 0 && system_timer_count >0) {
     b3e:	80 91 cc 04 	lds	r24, 0x04CC
     b42:	90 91 cd 04 	lds	r25, 0x04CD
     b46:	6a e0       	ldi	r22, 0x0A	; 10
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	e9 f4       	brne	.+58     	; 0xb8c <__vector_26+0x92>
     b52:	80 91 cc 04 	lds	r24, 0x04CC
     b56:	90 91 cd 04 	lds	r25, 0x04CD
     b5a:	18 16       	cp	r1, r24
     b5c:	19 06       	cpc	r1, r25
     b5e:	b4 f4       	brge	.+44     	; 0xb8c <__vector_26+0x92>
	    	level++;
     b60:	80 91 ca 04 	lds	r24, 0x04CA
     b64:	90 91 cb 04 	lds	r25, 0x04CB
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	90 93 cb 04 	sts	0x04CB, r25
     b6e:	80 93 ca 04 	sts	0x04CA, r24
			add_custom_char();
     b72:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <add_custom_char>
			increase_speed();
     b76:	0e 94 ab 04 	call	0x956	; 0x956 <increase_speed>
			//Sound for new level
			init_sound_timers(new_level_sound, new_level_times);
     b7a:	86 e3       	ldi	r24, 0x36	; 54
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	6e e6       	ldi	r22, 0x6E	; 110
     b80:	71 e0       	ldi	r23, 0x01	; 1
     b82:	0e 94 11 09 	call	0x1222	; 0x1222 <init_sound_timers>
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <__vector_26+0x92>
		}
	}
	else
	{
		reset_speed();
     b88:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <reset_speed>
	}	
}
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <__vector_15>:

//Timer to generate frequency
ISR(TIMER0_COMP_vect) 
{
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
	PORTE ^= (1 << PE4) | (1 << PE5);
     bc0:	93 b1       	in	r25, 0x03	; 3
     bc2:	80 e3       	ldi	r24, 0x30	; 48
     bc4:	89 27       	eor	r24, r25
     bc6:	83 b9       	out	0x03, r24	; 3
}
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <__vector_10>:

//Timer for length of frequency
ISR(TIMER2_OVF_vect) 
{
     bd6:	1f 92       	push	r1
     bd8:	0f 92       	push	r0
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	0f 92       	push	r0
     bde:	0b b6       	in	r0, 0x3b	; 59
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	ef 93       	push	r30
     bee:	ff 93       	push	r31
	sound_overflow++;
     bf0:	80 91 84 04 	lds	r24, 0x0484
     bf4:	90 91 85 04 	lds	r25, 0x0485
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 85 04 	sts	0x0485, r25
     bfe:	80 93 84 04 	sts	0x0484, r24
	
	if(sound_overflow>=current_sound_times[index_sound-1]) //Lenght of frequency
     c02:	e0 91 86 04 	lds	r30, 0x0486
     c06:	f0 91 87 04 	lds	r31, 0x0487
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e4 56       	subi	r30, 0x64	; 100
     c10:	fb 4f       	sbci	r31, 0xFB	; 251
     c12:	20 81       	ld	r18, Z
     c14:	31 81       	ldd	r19, Z+1	; 0x01
     c16:	80 91 84 04 	lds	r24, 0x0484
     c1a:	90 91 85 04 	lds	r25, 0x0485
     c1e:	82 17       	cp	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	94 f1       	brlt	.+100    	; 0xc88 <__vector_10+0xb2>
	{
		if(index_sound>=7) //stop timers
     c24:	80 91 86 04 	lds	r24, 0x0486
     c28:	90 91 87 04 	lds	r25, 0x0487
     c2c:	87 30       	cpi	r24, 0x07	; 7
     c2e:	91 05       	cpc	r25, r1
     c30:	9c f0       	brlt	.+38     	; 0xc58 <__vector_10+0x82>
		{
			sound_overflow = 0;
     c32:	10 92 85 04 	sts	0x0485, r1
     c36:	10 92 84 04 	sts	0x0484, r1
			TCNT2 = 0;
     c3a:	14 bc       	out	0x24, r1	; 36
			TCNT0 = 0;
     c3c:	12 be       	out	0x32, r1	; 50
			
			TCCR0 = 0x00;
     c3e:	13 be       	out	0x33, r1	; 51
			TCCR2 = 0x00;
     c40:	15 bc       	out	0x25, r1	; 37
			TIMSK &= ~(1 << OCIE0);
     c42:	87 b7       	in	r24, 0x37	; 55
     c44:	8d 7f       	andi	r24, 0xFD	; 253
     c46:	87 bf       	out	0x37, r24	; 55
			TIMSK &= ~(1 << TOIE2);
     c48:	87 b7       	in	r24, 0x37	; 55
     c4a:	8f 7b       	andi	r24, 0xBF	; 191
     c4c:	87 bf       	out	0x37, r24	; 55
			index_sound = 0;
     c4e:	10 92 87 04 	sts	0x0487, r1
     c52:	10 92 86 04 	sts	0x0486, r1
     c56:	14 c0       	rjmp	.+40     	; 0xc80 <__vector_10+0xaa>
		}
		else //Change sound frequency
		{
			OCR0 = current_sounds[index_sound];
     c58:	e0 91 86 04 	lds	r30, 0x0486
     c5c:	f0 91 87 04 	lds	r31, 0x0487
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e4 57       	subi	r30, 0x74	; 116
     c66:	fb 4f       	sbci	r31, 0xFB	; 251
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	81 bf       	out	0x31, r24	; 49
			index_sound++;
     c6e:	80 91 86 04 	lds	r24, 0x0486
     c72:	90 91 87 04 	lds	r25, 0x0487
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	90 93 87 04 	sts	0x0487, r25
     c7c:	80 93 86 04 	sts	0x0486, r24
			
		}
		
		sound_overflow = 0;
     c80:	10 92 85 04 	sts	0x0485, r1
     c84:	10 92 84 04 	sts	0x0484, r1
	}

}
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0b be       	out	0x3b, r0	; 59
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <__vector_29>:

//Timer to generate random seed for randomizer
ISR(TIMER3_OVF_vect)
{
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
	seed++;
     cb0:	80 91 82 04 	lds	r24, 0x0482
     cb4:	90 91 83 04 	lds	r25, 0x0483
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 83 04 	sts	0x0483, r25
     cbe:	80 93 82 04 	sts	0x0482, r24
}
     cc2:	9f 91       	pop	r25
     cc4:	8f 91       	pop	r24
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <pulse>:
static int
pulse(void)
{
  int v;

  PORTC |= 4;                /* EN = 1 */
     cd0:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd2:	8f e8       	ldi	r24, 0x8F	; 143
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <pulse+0x6>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <pulse+0xc>
     cdc:	00 00       	nop
  _delay_ms(0.1);            /* short delay */
  v = PINC>>4;               /* read data bus */
     cde:	83 b3       	in	r24, 0x13	; 19
  PORTC &= ~4;               /* EN = 0 */
     ce0:	aa 98       	cbi	0x15, 2	; 21

  return v;
}
     ce2:	82 95       	swap	r24
     ce4:	8f 70       	andi	r24, 0x0F	; 15
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	08 95       	ret

00000cea <read_nibble>:
}

static int
read_nibble(int rs)
{
  DDRC = 0x0F;               /* set data pins to input */
     cea:	9f e0       	ldi	r25, 0x0F	; 15
     cec:	94 bb       	out	0x14, r25	; 20
  PORTC = rs|2;              /* set register */
     cee:	82 60       	ori	r24, 0x02	; 2
     cf0:	85 bb       	out	0x15, r24	; 21
  return pulse();            /* read pulse */
     cf2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <pulse>
}
     cf6:	08 95       	ret

00000cf8 <read_byte>:
}

/* read a byte without waiting for the busy flag. */
static int
read_byte(int rs)
{
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	8c 01       	movw	r16, r24
  int v;
  
  v = read_nibble(rs)<<4;
     d06:	0e 94 75 06 	call	0xcea	; 0xcea <read_nibble>
     d0a:	ec 01       	movw	r28, r24
     d0c:	c2 95       	swap	r28
     d0e:	d2 95       	swap	r29
     d10:	d0 7f       	andi	r29, 0xF0	; 240
     d12:	dc 27       	eor	r29, r28
     d14:	c0 7f       	andi	r28, 0xF0	; 240
     d16:	dc 27       	eor	r29, r28
  v|= read_nibble(rs);
     d18:	c8 01       	movw	r24, r16
     d1a:	0e 94 75 06 	call	0xcea	; 0xcea <read_nibble>
     d1e:	c8 2b       	or	r28, r24
     d20:	d9 2b       	or	r29, r25

  return v;
}
     d22:	7e 01       	movw	r14, r28
     d24:	8c 2f       	mov	r24, r28
     d26:	9f 2d       	mov	r25, r15
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	08 95       	ret

00000d36 <wait>:

/* wait until the busy flag is clear. */
void
wait(void)
{
  while (read_byte(0)&0x80)
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <read_byte>
     d3e:	87 fd       	sbrc	r24, 7
     d40:	fa cf       	rjmp	.-12     	; 0xd36 <wait>
    ;
}
     d42:	08 95       	ret

00000d44 <write_nibble>:
}

static void
write_nibble(int v, int rs)
{
  DDRC = 0xFF;               /* set data pins to output */
     d44:	2f ef       	ldi	r18, 0xFF	; 255
     d46:	24 bb       	out	0x14, r18	; 20
  PORTC = rs|((v&0xF)<<4);   /* set register and data */
     d48:	82 95       	swap	r24
     d4a:	92 95       	swap	r25
     d4c:	90 7f       	andi	r25, 0xF0	; 240
     d4e:	98 27       	eor	r25, r24
     d50:	80 7f       	andi	r24, 0xF0	; 240
     d52:	98 27       	eor	r25, r24
     d54:	86 2b       	or	r24, r22
     d56:	85 bb       	out	0x15, r24	; 21
  pulse();                   /* write pulse */
     d58:	0e 94 68 06 	call	0xcd0	; 0xcd0 <pulse>
}
     d5c:	08 95       	ret

00000d5e <lcd_write>:
}

/* write a byte into register rs (0 = control, 1 = data). */
void
lcd_write(int v, int rs)
{
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	8b 01       	movw	r16, r22
  write_nibble(v>>4,rs);     /* first the high nibble */
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	95 95       	asr	r25
     d70:	87 95       	ror	r24
     d72:	95 95       	asr	r25
     d74:	87 95       	ror	r24
     d76:	95 95       	asr	r25
     d78:	87 95       	ror	r24
     d7a:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
  write_nibble(v,rs);        /* and then the low */
     d7e:	ce 01       	movw	r24, r28
     d80:	b8 01       	movw	r22, r16
     d82:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
  wait();
     d86:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <lcd_init>:
/* initialize lcd (see HD44780 datasheet) */
void
lcd_init(void)
{
	/* set interface to be 4 bits long */
  write_nibble(3,0); _delay_ms(5);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
     da0:	8f e1       	ldi	r24, 0x1F	; 31
     da2:	9e e4       	ldi	r25, 0x4E	; 78
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <lcd_init+0x10>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <lcd_init+0x16>
     daa:	00 00       	nop
  write_nibble(3,0); _delay_ms(5);
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
     db8:	8f e1       	ldi	r24, 0x1F	; 31
     dba:	9e e4       	ldi	r25, 0x4E	; 78
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <lcd_init+0x28>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <lcd_init+0x2e>
     dc2:	00 00       	nop
  write_nibble(3,0); _delay_ms(5);
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
     dd0:	8f e1       	ldi	r24, 0x1F	; 31
     dd2:	9e e4       	ldi	r25, 0x4E	; 78
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <lcd_init+0x40>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <lcd_init+0x46>
     dda:	00 00       	nop
  write_nibble(2,0); _delay_ms(5);
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	0e 94 a2 06 	call	0xd44	; 0xd44 <write_nibble>
     de8:	8f e1       	ldi	r24, 0x1F	; 31
     dea:	9e e4       	ldi	r25, 0x4E	; 78
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <lcd_init+0x58>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <lcd_init+0x5e>
     df2:	00 00       	nop

	/* function set: set number of lines (bit 3) and font (bit 2) */
  lcd_write_ctrl(LCD_FUNCTION|0x0C);
     df4:	8c e2       	ldi	r24, 0x2C	; 44
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
  lcd_write_ctrl(LCD_OFF);
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
  lcd_write_ctrl(LCD_CLEAR);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	/* entry mode set: increment DDRAM pointer when a character is written */
  lcd_write_ctrl(LCD_MODE|0x02);
     e18:	86 e0       	ldi	r24, 0x06	; 6
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
}
     e24:	08 95       	ret

00000e26 <lcd_read>:
}

/* read a byte from lcd register rs. */
int
lcd_read(int rs)
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
  int v;
  
  v = read_byte(rs);
     e2a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <read_byte>
     e2e:	08 2f       	mov	r16, r24
     e30:	19 2f       	mov	r17, r25
  wait();
     e32:	0e 94 9b 06 	call	0xd36	; 0xd36 <wait>

  return v;
}
     e36:	80 2f       	mov	r24, r16
     e38:	91 2f       	mov	r25, r17
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <lcd_gotoxy>:
    ;
}

void lcd_gotoxy (unsigned char x, unsigned char y) {

  if ( y==0 ) lcd_write_ctrl(LCD_DDRAM | (LCD_START_LINE1+x));
     e40:	66 23       	and	r22, r22
     e42:	39 f4       	brne	.+14     	; 0xe52 <lcd_gotoxy+0x12>
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     e50:	08 95       	ret

  else lcd_write_ctrl(LCD_DDRAM | (LCD_START_LINE2+x));
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 5c       	subi	r24, 0xC0	; 192
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     e62:	08 95       	ret

00000e64 <start_timer_for_randomizer>:
int new_obstacles[MAX_OBSTACLES];

//Starts the timer to create seed for the obstacles
void start_timer_for_randomizer()
{
	TCCR3B = (1 << CS30); 
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK &= ~(1 << OCIE3A); //Timer3 compare interrupt disabled
     e6a:	ed e7       	ldi	r30, 0x7D	; 125
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8f 7e       	andi	r24, 0xEF	; 239
     e72:	80 83       	st	Z, r24

	ETIMSK |= (1<<TOIE3); // Timer3 Overflow Interrupt Enable
     e74:	80 81       	ld	r24, Z
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	80 83       	st	Z, r24
	
}
     e7a:	08 95       	ret

00000e7c <print>:


//Prints current values on screen with the position of the car, the obstacles and the level value
void print(volatile int level, volatile int obstacles[], volatile int position[], int crash_value)
{
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <print+0x16>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	06 2f       	mov	r16, r22
     e9c:	e7 2e       	mov	r14, r23
     e9e:	5a 01       	movw	r10, r20
     ea0:	69 01       	movw	r12, r18
	if(crash_value!=2)
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <print+0x2e>
     ea8:	be c0       	rjmp	.+380    	; 0x1026 <print+0x1aa>
	{
		lcd_write_ctrl(LCD_CLEAR);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		int x = 0;
		//Print level row
		lcd_gotoxy(x,1);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
		lcd_write_data(0);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_gotoxy(x,0);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
		if(level <= 50){
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	83 33       	cpi	r24, 0x33	; 51
     ed8:	91 05       	cpc	r25, r1
     eda:	3c f4       	brge	.+14     	; 0xeea <print+0x6e>
			lcd_write_data(7);
     edc:	87 e0       	ldi	r24, 0x07	; 7
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <print+0x7a>
		}
		else{
			lcd_write_data('+');
     eea:	8b e2       	ldi	r24, 0x2B	; 43
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     ef6:	8e 2d       	mov	r24, r14
     ef8:	e0 2e       	mov	r14, r16
     efa:	f8 2e       	mov	r15, r24
}


//Prints current values on screen with the position of the car, the obstacles and the level value
void print(volatile int level, volatile int obstacles[], volatile int position[], int crash_value)
{
     efc:	01 e0       	ldi	r16, 0x01	; 1
     efe:	10 e0       	ldi	r17, 0x00	; 0


	
		//Print all obstacles
		for(int i = 0; i<MAX_OBSTACLES; i++){
			int current = obstacles[i];
     f00:	f7 01       	movw	r30, r14
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
			if(current == 1){
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	59 f4       	brne	.+22     	; 0xf22 <print+0xa6>
				lcd_gotoxy(x,1);
     f0c:	80 2f       	mov	r24, r16
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(3);
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     f20:	25 c0       	rjmp	.+74     	; 0xf6c <print+0xf0>
			}
			else if(current == 2){
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	91 05       	cpc	r25, r1
     f26:	59 f4       	brne	.+22     	; 0xf3e <print+0xc2>
				lcd_gotoxy(x,0);
     f28:	80 2f       	mov	r24, r16
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(3);
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     f3c:	17 c0       	rjmp	.+46     	; 0xf6c <print+0xf0>
			}
			else if(current == 3){
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <print+0xf0>
				lcd_gotoxy(x,0);
     f44:	80 2f       	mov	r24, r16
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(3);
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
				lcd_gotoxy(x,1);
     f58:	80 2f       	mov	r24, r16
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(3);
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	e8 0e       	add	r14, r24
     f72:	f9 1e       	adc	r15, r25
		x++;


	
		//Print all obstacles
		for(int i = 0; i<MAX_OBSTACLES; i++){
     f74:	0f 30       	cpi	r16, 0x0F	; 15
     f76:	11 05       	cpc	r17, r1
     f78:	19 f0       	breq	.+6      	; 0xf80 <print+0x104>
				lcd_gotoxy(x,0);
				lcd_write_data(3);
				lcd_gotoxy(x,1);
				lcd_write_data(3);
			}
			x++;
     f7a:	0f 5f       	subi	r16, 0xFF	; 255
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	c0 cf       	rjmp	.-128    	; 0xf00 <print+0x84>
		}
	
		int position_x = position[1];
     f80:	f5 01       	movw	r30, r10
     f82:	22 81       	ldd	r18, Z+2	; 0x02
     f84:	33 81       	ldd	r19, Z+3	; 0x03
		int position_y = position[0];
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
				lcd_gotoxy(position_y+1,0);
			}		
			lcd_write_data(2);
		}*/
		//Prints car
		if(crash_value==1){
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	cf 16       	cp	r12, r31
     f8e:	d1 04       	cpc	r13, r1
     f90:	99 f4       	brne	.+38     	; 0xfb8 <print+0x13c>
			if(position_x == 2)
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	29 f4       	brne	.+10     	; 0xfa2 <print+0x126>
			{
				lcd_gotoxy(position_y+1,1);
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <print+0x12e>
			}
			else
			{
				lcd_gotoxy(position_y+1,0);
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
			}

			lcd_write_data(5);
     faa:	85 e0       	ldi	r24, 0x05	; 5
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     fb6:	37 c0       	rjmp	.+110    	; 0x1026 <print+0x1aa>
		}
		else if(crash_value == 0)
     fb8:	c1 14       	cp	r12, r1
     fba:	d1 04       	cpc	r13, r1
     fbc:	a1 f5       	brne	.+104    	; 0x1026 <print+0x1aa>
		{
			if(position_x == 1)
     fbe:	21 30       	cpi	r18, 0x01	; 1
     fc0:	31 05       	cpc	r19, r1
     fc2:	59 f4       	brne	.+22     	; 0xfda <print+0x15e>
			{
				lcd_gotoxy(position_y+1,1);
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(6);
     fcc:	86 e0       	ldi	r24, 0x06	; 6
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     fd8:	26 c0       	rjmp	.+76     	; 0x1026 <print+0x1aa>
			}
			else if(position_x == 2)
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	59 f4       	brne	.+22     	; 0xff6 <print+0x17a>
			{
				lcd_gotoxy(position_y+1,1);
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(4);
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <print+0x1aa>
			}
			else if(position_x  == 3)
     ff6:	23 30       	cpi	r18, 0x03	; 3
     ff8:	31 05       	cpc	r19, r1
     ffa:	59 f4       	brne	.+22     	; 0x1012 <print+0x196>
			{
				lcd_gotoxy(position_y+1,0);
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(6);
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <print+0x1aa>
			}
			else
			{
				lcd_gotoxy(position_y+1,0);
    1012:	8f 5f       	subi	r24, 0xFF	; 255
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
				lcd_write_data(4);
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
			}
		}
	}


}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	08 95       	ret

00001040 <create_obstacle>:
	1 = Left obstacle
	2 = Right obstacle
	3 = Two lane obstacle
	*/
int* create_obstacle(volatile int obstacles[])
{
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	7c 01       	movw	r14, r24
			new_rand = (rand() % 4);
		}
	}
	else if(current_obstacle == 3) //If obstacle on both lanes, next obstacle must be empty
	{
		new_rand = 0;
    104e:	e4 ed       	ldi	r30, 0xD4	; 212
    1050:	f4 e0       	ldi	r31, 0x04	; 4
	0 = No obstacle
	1 = Left obstacle
	2 = Right obstacle
	3 = Two lane obstacle
	*/
int* create_obstacle(volatile int obstacles[])
    1052:	ef 01       	movw	r28, r30
    1054:	6e 96       	adiw	r28, 0x1e	; 30
{
	
	for(int i = 0; i<MAX_OBSTACLES;i++){
		new_obstacles[i] = 0;
    1056:	11 92       	st	Z+, r1
    1058:	11 92       	st	Z+, r1
	3 = Two lane obstacle
	*/
int* create_obstacle(volatile int obstacles[])
{
	
	for(int i = 0; i<MAX_OBSTACLES;i++){
    105a:	ec 17       	cp	r30, r28
    105c:	fd 07       	cpc	r31, r29
    105e:	d9 f7       	brne	.-10     	; 0x1056 <create_obstacle+0x16>
		new_obstacles[i] = 0;
	}

	int current_obstacle = obstacles[0];
    1060:	f7 01       	movw	r30, r14
    1062:	00 81       	ld	r16, Z
    1064:	11 81       	ldd	r17, Z+1	; 0x01

	int new_rand = (rand() % 4);
    1066:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
	//Algorithm to make game playable
	if(current_obstacle == 0) //If no obstacle, an obstacle must come
    1072:	01 15       	cp	r16, r1
    1074:	11 05       	cpc	r17, r1
    1076:	61 f4       	brne	.+24     	; 0x1090 <create_obstacle+0x50>
	{
		while(new_rand == 0)
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	89 f5       	brne	.+98     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 3)+1;
    107c:	03 e0       	ldi	r16, 0x03	; 3
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
    1084:	b8 01       	movw	r22, r16
    1086:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
    108a:	01 96       	adiw	r24, 0x01	; 1

	int new_rand = (rand() % 4);
	//Algorithm to make game playable
	if(current_obstacle == 0) //If no obstacle, an obstacle must come
	{
		while(new_rand == 0)
    108c:	c9 f3       	breq	.-14     	; 0x1080 <create_obstacle+0x40>
    108e:	27 c0       	rjmp	.+78     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 3)+1;
		}
	}
	else if(current_obstacle == 1) //If left lane obstacle no right lane obstacle can come
    1090:	01 30       	cpi	r16, 0x01	; 1
    1092:	11 05       	cpc	r17, r1
    1094:	71 f4       	brne	.+28     	; 0x10b2 <create_obstacle+0x72>
	{
		while(new_rand == 2)
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	91 05       	cpc	r25, r1
    109a:	09 f5       	brne	.+66     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 4);
    109c:	04 e0       	ldi	r16, 0x04	; 4
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
    10a4:	b8 01       	movw	r22, r16
    10a6:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
			new_rand = (rand() % 3)+1;
		}
	}
	else if(current_obstacle == 1) //If left lane obstacle no right lane obstacle can come
	{
		while(new_rand == 2)
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	91 05       	cpc	r25, r1
    10ae:	c1 f3       	breq	.-16     	; 0x10a0 <create_obstacle+0x60>
    10b0:	16 c0       	rjmp	.+44     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 4);
		}
	}
	else if(current_obstacle == 2) //If right lane obstacle no left lane obstacle can come
    10b2:	02 30       	cpi	r16, 0x02	; 2
    10b4:	11 05       	cpc	r17, r1
    10b6:	71 f4       	brne	.+28     	; 0x10d4 <create_obstacle+0x94>
	{
		while(new_rand == 1)
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	81 f4       	brne	.+32     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 4);
    10be:	04 e0       	ldi	r16, 0x04	; 4
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	0e 94 6d 13 	call	0x26da	; 0x26da <rand>
    10c6:	b8 01       	movw	r22, r16
    10c8:	0e 94 c1 12 	call	0x2582	; 0x2582 <__divmodhi4>
			new_rand = (rand() % 4);
		}
	}
	else if(current_obstacle == 2) //If right lane obstacle no left lane obstacle can come
	{
		while(new_rand == 1)
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	91 05       	cpc	r25, r1
    10d0:	c1 f3       	breq	.-16     	; 0x10c2 <create_obstacle+0x82>
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <create_obstacle+0x9e>
		{
			new_rand = (rand() % 4);
		}
	}
	else if(current_obstacle == 3) //If obstacle on both lanes, next obstacle must be empty
    10d4:	03 30       	cpi	r16, 0x03	; 3
    10d6:	11 05       	cpc	r17, r1
    10d8:	11 f4       	brne	.+4      	; 0x10de <create_obstacle+0x9e>
	{
		new_rand = 0;
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	new_obstacles[0] = new_rand;
    10de:	90 93 d5 04 	sts	0x04D5, r25
    10e2:	80 93 d4 04 	sts	0x04D4, r24
    10e6:	d7 01       	movw	r26, r14
    10e8:	e6 ed       	ldi	r30, 0xD6	; 214
    10ea:	f4 e0       	ldi	r31, 0x04	; 4

	for(int i = 0; i<MAX_OBSTACLES-1;i++){
		new_obstacles[i+1] = obstacles[i];
    10ec:	8d 91       	ld	r24, X+
    10ee:	9d 91       	ld	r25, X+
    10f0:	81 93       	st	Z+, r24
    10f2:	91 93       	st	Z+, r25
		new_rand = 0;
	}
	
	new_obstacles[0] = new_rand;

	for(int i = 0; i<MAX_OBSTACLES-1;i++){
    10f4:	ce 17       	cp	r28, r30
    10f6:	df 07       	cpc	r29, r31
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <create_obstacle+0xac>
		new_obstacles[i+1] = obstacles[i];
	}

	return &new_obstacles;

}
    10fa:	84 ed       	ldi	r24, 0xD4	; 212
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	08 95       	ret

0000110c <verify_crash>:
Result:
2 = Crash
1 = Jumping box
0 = No intersection
*/
int verify_crash(volatile int obstacles[MAX_OBSTACLES], volatile int position[2]){
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	fb 01       	movw	r30, r22

	int result = 0;
	if(obstacles[position[0]]==3) //Two lane obstacle
    1116:	a0 81       	ld	r26, Z
    1118:	b1 81       	ldd	r27, Z+1	; 0x01
    111a:	aa 0f       	add	r26, r26
    111c:	bb 1f       	adc	r27, r27
    111e:	a8 0f       	add	r26, r24
    1120:	b9 1f       	adc	r27, r25
    1122:	2d 91       	ld	r18, X+
    1124:	3c 91       	ld	r19, X
    1126:	11 97       	sbiw	r26, 0x01	; 1
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	79 f4       	brne	.+30     	; 0x114c <verify_crash+0x40>
	{
		if(position[1] == 1 || position[1] == 3) //Not jumping
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <verify_crash+0x2e>
    1138:	44 c0       	rjmp	.+136    	; 0x11c2 <verify_crash+0xb6>
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <verify_crash+0x3a>
    1144:	41 c0       	rjmp	.+130    	; 0x11c8 <verify_crash+0xbc>
		{
			result = 2;
		}
		else
		{
			result = 1;
    1146:	c1 e0       	ldi	r28, 0x01	; 1
    1148:	d0 e0       	ldi	r29, 0x00	; 0
    114a:	60 c0       	rjmp	.+192    	; 0x120c <verify_crash+0x100>
		}
	}
	else if(obstacles[position[0]]==1) //Left lane obstacle
    114c:	a0 81       	ld	r26, Z
    114e:	b1 81       	ldd	r27, Z+1	; 0x01
    1150:	aa 0f       	add	r26, r26
    1152:	bb 1f       	adc	r27, r27
    1154:	a8 0f       	add	r26, r24
    1156:	b9 1f       	adc	r27, r25
    1158:	2d 91       	ld	r18, X+
    115a:	3c 91       	ld	r19, X
    115c:	11 97       	sbiw	r26, 0x01	; 1
    115e:	21 30       	cpi	r18, 0x01	; 1
    1160:	31 05       	cpc	r19, r1
    1162:	79 f4       	brne	.+30     	; 0x1182 <verify_crash+0x76>
	{
		if(position[1] == 1) //Left lane not jumping
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	93 81       	ldd	r25, Z+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	81 f1       	breq	.+96     	; 0x11ce <verify_crash+0xc2>
		{
			result = 2;
		}
		else if(position[1] == 2) //Left lane jumping
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
		{
			result = 2;
		}
		else
		{
			result = 1;
    1172:	c1 e0       	ldi	r28, 0x01	; 1
    1174:	d0 e0       	ldi	r29, 0x00	; 0
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	f9 f0       	breq	.+62     	; 0x11ba <verify_crash+0xae>
    117c:	c0 e0       	ldi	r28, 0x00	; 0
    117e:	d0 e0       	ldi	r29, 0x00	; 0
    1180:	1c c0       	rjmp	.+56     	; 0x11ba <verify_crash+0xae>
		else if(position[1] == 2) //Left lane jumping
		{
			result = 1;
		}
	}
	else if(obstacles[position[0]]==2) //Right lane obstacle
    1182:	20 81       	ld	r18, Z
    1184:	31 81       	ldd	r19, Z+1	; 0x01
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	dc 01       	movw	r26, r24
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	11 97       	sbiw	r26, 0x01	; 1
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	91 05       	cpc	r25, r1
    119a:	09 f0       	breq	.+2      	; 0x119e <verify_crash+0x92>
    119c:	3f c0       	rjmp	.+126    	; 0x121c <verify_crash+0x110>
	{
		if(position[1] == 3) //Right lane not jumping
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	b1 f0       	breq	.+44     	; 0x11d4 <verify_crash+0xc8>
		{
			result = 2;
		}
		else if(position[1] == 4) //Right lane jumping
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
		{
			result = 2;
		}
		else
		{
			result = 1;
    11ac:	c1 e0       	ldi	r28, 0x01	; 1
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	91 05       	cpc	r25, r1
    11b4:	11 f0       	breq	.+4      	; 0x11ba <verify_crash+0xae>
    11b6:	c0 e0       	ldi	r28, 0x00	; 0
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
			result = 1;
		}
	}

	//Stop game if crash
	if(result == 2)
    11ba:	c2 30       	cpi	r28, 0x02	; 2
    11bc:	d1 05       	cpc	r29, r1
    11be:	31 f5       	brne	.+76     	; 0x120c <verify_crash+0x100>
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <verify_crash+0xcc>
int verify_crash(volatile int obstacles[MAX_OBSTACLES], volatile int position[2]){

	int result = 0;
	if(obstacles[position[0]]==3) //Two lane obstacle
	{
		if(position[1] == 1 || position[1] == 3) //Not jumping
    11c2:	c2 e0       	ldi	r28, 0x02	; 2
    11c4:	d0 e0       	ldi	r29, 0x00	; 0
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <verify_crash+0xcc>
    11c8:	c2 e0       	ldi	r28, 0x02	; 2
    11ca:	d0 e0       	ldi	r29, 0x00	; 0
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <verify_crash+0xcc>
			result = 1;
		}
	}
	else if(obstacles[position[0]]==1) //Left lane obstacle
	{
		if(position[1] == 1) //Left lane not jumping
    11ce:	c2 e0       	ldi	r28, 0x02	; 2
    11d0:	d0 e0       	ldi	r29, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <verify_crash+0xcc>
			result = 1;
		}
	}
	else if(obstacles[position[0]]==2) //Right lane obstacle
	{
		if(position[1] == 3) //Right lane not jumping
    11d4:	c2 e0       	ldi	r28, 0x02	; 2
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	//Stop game if crash
	if(result == 2)
	{
		stop = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	90 93 d3 04 	sts	0x04D3, r25
    11e0:	80 93 d2 04 	sts	0x04D2, r24
		//Decide if high score or game over
		int high_score = eeprom_read_byte(0x05);
    11e4:	85 e0       	ldi	r24, 0x05	; 5
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 ae 13 	call	0x275c	; 0x275c <__eerd_byte_m128>
    11ec:	90 e0       	ldi	r25, 0x00	; 0
		if(level>high_score||high_score==255)
    11ee:	20 91 ca 04 	lds	r18, 0x04CA
    11f2:	30 91 cb 04 	lds	r19, 0x04CB
    11f6:	82 17       	cp	r24, r18
    11f8:	93 07       	cpc	r25, r19
    11fa:	1c f0       	brlt	.+6      	; 0x1202 <verify_crash+0xf6>
    11fc:	8f 3f       	cpi	r24, 0xFF	; 255
    11fe:	91 05       	cpc	r25, r1
    1200:	19 f4       	brne	.+6      	; 0x1208 <verify_crash+0xfc>
		{
			init_high_scores();
    1202:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <init_high_scores>
    1206:	02 c0       	rjmp	.+4      	; 0x120c <verify_crash+0x100>
		}
		else
		{
			init_game_over();
    1208:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <init_game_over>
		}

	}
	return result;

}
    120c:	7e 01       	movw	r14, r28
    120e:	8c 2f       	mov	r24, r28
    1210:	9f 2d       	mov	r25, r15
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	ff 90       	pop	r15
    1218:	ef 90       	pop	r14
    121a:	08 95       	ret
1 = Jumping box
0 = No intersection
*/
int verify_crash(volatile int obstacles[MAX_OBSTACLES], volatile int position[2]){

	int result = 0;
    121c:	c0 e0       	ldi	r28, 0x00	; 0
    121e:	d0 e0       	ldi	r29, 0x00	; 0
    1220:	f5 cf       	rjmp	.-22     	; 0x120c <verify_crash+0x100>

00001222 <init_sound_timers>:

}

//Method to start sound given values to create frequencies and length of each one
void init_sound_timers(int sounds[], int sound_times[])
{
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	a6 2f       	mov	r26, r22
    1228:	b7 2f       	mov	r27, r23
    122a:	bd 01       	movw	r22, r26
    122c:	ee e9       	ldi	r30, 0x9E	; 158
    122e:	f4 e0       	ldi	r31, 0x04	; 4
    1230:	28 2f       	mov	r18, r24
    1232:	39 2f       	mov	r19, r25
    1234:	c9 01       	movw	r24, r18
    1236:	cc e8       	ldi	r28, 0x8C	; 140
    1238:	d4 e0       	ldi	r29, 0x04	; 4
	return result;

}

//Method to start sound given values to create frequencies and length of each one
void init_sound_timers(int sounds[], int sound_times[])
    123a:	af 01       	movw	r20, r30
    123c:	42 5f       	subi	r20, 0xF2	; 242
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
{
	for(int i = 0; i<7;i++)
	{
		current_sound_times[i] = sound_times[i];
    1240:	db 01       	movw	r26, r22
    1242:	2d 91       	ld	r18, X+
    1244:	3d 91       	ld	r19, X+
    1246:	bd 01       	movw	r22, r26
    1248:	21 93       	st	Z+, r18
    124a:	31 93       	st	Z+, r19
		current_sounds[i] = sounds[i];
    124c:	dc 01       	movw	r26, r24
    124e:	2d 91       	ld	r18, X+
    1250:	3d 91       	ld	r19, X+
    1252:	cd 01       	movw	r24, r26
    1254:	29 93       	st	Y+, r18
    1256:	39 93       	st	Y+, r19
}

//Method to start sound given values to create frequencies and length of each one
void init_sound_timers(int sounds[], int sound_times[])
{
	for(int i = 0; i<7;i++)
    1258:	e4 17       	cp	r30, r20
    125a:	f5 07       	cpc	r31, r21
    125c:	89 f7       	brne	.-30     	; 0x1240 <init_sound_timers+0x1e>
	{
		current_sound_times[i] = sound_times[i];
		current_sounds[i] = sounds[i];
	}
	//Start timer 0 prescaler 1024
	TCCR0 |= (1 << CS02) | (1 << CS00); 
    125e:	83 b7       	in	r24, 0x33	; 51
    1260:	85 60       	ori	r24, 0x05	; 5
    1262:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 0;
    1264:	12 be       	out	0x32, r1	; 50

    TCCR0 |=    (1 << WGM01);
    1266:	83 b7       	in	r24, 0x33	; 51
    1268:	88 60       	ori	r24, 0x08	; 8
    126a:	83 bf       	out	0x33, r24	; 51

    //Enable compare interrupts
    TIMSK |= (1 << OCIE0);
    126c:	87 b7       	in	r24, 0x37	; 55
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	87 bf       	out	0x37, r24	; 55
	
	OCR0 = current_sounds[0];
    1272:	80 91 8c 04 	lds	r24, 0x048C
    1276:	81 bf       	out	0x31, r24	; 49
	index_sound++;
    1278:	80 91 86 04 	lds	r24, 0x0486
    127c:	90 91 87 04 	lds	r25, 0x0487
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	90 93 87 04 	sts	0x0487, r25
    1286:	80 93 86 04 	sts	0x0486, r24
	
	//Start timer 2 prescaler 1024
	TCCR2 |= (1 << CS22) | (1 << CS20);
    128a:	85 b5       	in	r24, 0x25	; 37
    128c:	85 60       	ori	r24, 0x05	; 5
    128e:	85 bd       	out	0x25, r24	; 37

	TCNT2 = 0;
    1290:	14 bc       	out	0x24, r1	; 36
	//Enable overflow interrupts
	TIMSK |= (1 << TOIE2);
    1292:	87 b7       	in	r24, 0x37	; 55
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	87 bf       	out	0x37, r24	; 55
	
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <refresh_menu>:
extern int start;


void refresh_menu()
{
	lcd_write_ctrl(LCD_CLEAR);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(1,0);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	
	lcd_write_data('S');
    12b2:	83 e5       	ldi	r24, 0x53	; 83
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('T');
    12be:	84 e5       	ldi	r24, 0x54	; 84
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('A');
    12ca:	81 e4       	ldi	r24, 0x41	; 65
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('R');
    12d6:	82 e5       	ldi	r24, 0x52	; 82
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('T');
    12e2:	84 e5       	ldi	r24, 0x54	; 84
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(8,0);
    12ee:	88 e0       	ldi	r24, 0x08	; 8
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('S');
    12f6:	83 e5       	ldi	r24, 0x53	; 83
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('E');
    1302:	85 e4       	ldi	r24, 0x45	; 69
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('T');
    130e:	84 e5       	ldi	r24, 0x54	; 84
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('T');
    131a:	84 e5       	ldi	r24, 0x54	; 84
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('I');
    1326:	89 e4       	ldi	r24, 0x49	; 73
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('N');
    1332:	8e e4       	ldi	r24, 0x4E	; 78
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('G');
    133e:	87 e4       	ldi	r24, 0x47	; 71
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('S');
    134a:	83 e5       	ldi	r24, 0x53	; 83
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(3,1);
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('H');
    135e:	88 e4       	ldi	r24, 0x48	; 72
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('I');
    136a:	89 e4       	ldi	r24, 0x49	; 73
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('G');
    1376:	87 e4       	ldi	r24, 0x47	; 71
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('H');
    1382:	88 e4       	ldi	r24, 0x48	; 72
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('S');
    139a:	83 e5       	ldi	r24, 0x53	; 83
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('C');
    13a6:	83 e4       	ldi	r24, 0x43	; 67
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('O');
    13b2:	8f e4       	ldi	r24, 0x4F	; 79
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('R');
    13be:	82 e5       	ldi	r24, 0x52	; 82
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('E');
    13ca:	85 e4       	ldi	r24, 0x45	; 69
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	61 e0       	ldi	r22, 0x01	; 1
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('S');
    13d6:	83 e5       	ldi	r24, 0x53	; 83
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

}
    13e2:	08 95       	ret

000013e4 <init_menu>:

void init_menu(void) {
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
	//Start randomizer for obstacles
	start_timer_for_randomizer();
    13ec:	0e 94 32 07 	call	0xe64	; 0xe64 <start_timer_for_randomizer>
    13f0:	04 e5       	ldi	r16, 0x54	; 84
    13f2:	13 e0       	ldi	r17, 0x03	; 3
    13f4:	c0 e4       	ldi	r28, 0x40	; 64
    13f6:	d0 e0       	ldi	r29, 0x00	; 0
	//Add right arrow character
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+i);
    13f8:	ce 01       	movw	r24, r28
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__cmenu[i]);
    1402:	f8 01       	movw	r30, r16
    1404:	81 91       	ld	r24, Z+
    1406:	8f 01       	movw	r16, r30
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1412:	21 96       	adiw	r28, 0x01	; 1

void init_menu(void) {
	//Start randomizer for obstacles
	start_timer_for_randomizer();
	//Add right arrow character
	for(int i=0;i<8;i++)
    1414:	c8 34       	cpi	r28, 0x48	; 72
    1416:	d1 05       	cpc	r29, r1
    1418:	79 f7       	brne	.-34     	; 0x13f8 <init_menu+0x14>
	{
		lcd_write_ctrl(LCD_CGRAM+i);
		lcd_write_data(__cmenu[i]);
	}

	refresh_menu();
    141a:	0e 94 4f 09 	call	0x129e	; 0x129e <refresh_menu>

	lcd_gotoxy(0,0);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	61 e0       	ldi	r22, 0x01	; 1
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	start = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	90 93 09 01 	sts	0x0109, r25
    143a:	80 93 08 01 	sts	0x0108, r24

}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	08 95       	ret

00001448 <menu_move_scores>:

//Move selection to high scores
void menu_move_scores(){
	
	refresh_menu();
    1448:	0e 94 4f 09 	call	0x129e	; 0x129e <refresh_menu>

	lcd_gotoxy(2,1);
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	start = 3;
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	90 93 09 01 	sts	0x0109, r25
    1468:	80 93 08 01 	sts	0x0108, r24


}
    146c:	08 95       	ret

0000146e <menu_move_start>:

//Move selection to start
void menu_move_start(){
	
	refresh_menu();
    146e:	0e 94 4f 09 	call	0x129e	; 0x129e <refresh_menu>

	lcd_gotoxy(0,0);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	start = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	90 93 09 01 	sts	0x0109, r25
    148e:	80 93 08 01 	sts	0x0108, r24

}
    1492:	08 95       	ret

00001494 <menu_move_settings>:

//Move selection to settings
void menu_move_settings(){
	
	
	refresh_menu();
    1494:	0e 94 4f 09 	call	0x129e	; 0x129e <refresh_menu>
	lcd_gotoxy(7,0);
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	start = 2;
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 09 01 	sts	0x0109, r25
    14b4:	80 93 08 01 	sts	0x0108, r24

}
    14b8:	08 95       	ret

000014ba <init_settings>:
#include "lcd.h"
#include "custom_char.h"

extern int acceleration;

void init_settings(void){
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	0c e5       	ldi	r16, 0x5C	; 92
    14c4:	13 e0       	ldi	r17, 0x03	; 3
    14c6:	c0 e4       	ldi	r28, 0x40	; 64
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
	//Add costum characters
	for(int i=0;i<24;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+i);
    14ca:	ce 01       	movw	r24, r28
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__csettings[i]);
    14d4:	f8 01       	movw	r30, r16
    14d6:	81 91       	ld	r24, Z+
    14d8:	8f 01       	movw	r16, r30
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    14e4:	21 96       	adiw	r28, 0x01	; 1

extern int acceleration;

void init_settings(void){
	//Add costum characters
	for(int i=0;i<24;i++)
    14e6:	c8 35       	cpi	r28, 0x58	; 88
    14e8:	d1 05       	cpc	r29, r1
    14ea:	79 f7       	brne	.-34     	; 0x14ca <init_settings+0x10>
	{
		lcd_write_ctrl(LCD_CGRAM+i);
		lcd_write_data(__csettings[i]);
	}

	lcd_write_ctrl(LCD_CLEAR);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(2);
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('E');
    1504:	85 e4       	ldi	r24, 0x45	; 69
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('n');
    1510:	8e e6       	ldi	r24, 0x6E	; 110
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    151c:	81 e6       	ldi	r24, 0x61	; 97
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('b');
    1528:	82 e6       	ldi	r24, 0x62	; 98
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('l');
    1534:	8c e6       	ldi	r24, 0x6C	; 108
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1540:	85 e6       	ldi	r24, 0x65	; 101
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('/');
    154c:	8f e2       	ldi	r24, 0x2F	; 47
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('D');
    1558:	84 e4       	ldi	r24, 0x44	; 68
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	61 e0       	ldi	r22, 0x01	; 1
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('i');
    1564:	89 e6       	ldi	r24, 0x69	; 105
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('s');
    1570:	83 e7       	ldi	r24, 0x73	; 115
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    157c:	81 e6       	ldi	r24, 0x61	; 97
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('b');
    1588:	82 e6       	ldi	r24, 0x62	; 98
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('l');
    1594:	8c e6       	ldi	r24, 0x6C	; 108
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    15a0:	85 e6       	ldi	r24, 0x65	; 101
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_gotoxy(0,1);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('A');
    15b4:	81 e4       	ldi	r24, 0x41	; 65
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('c');
    15c0:	83 e6       	ldi	r24, 0x63	; 99
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('c');
    15cc:	83 e6       	ldi	r24, 0x63	; 99
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    15d8:	85 e6       	ldi	r24, 0x65	; 101
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('l');
    15e4:	8c e6       	ldi	r24, 0x6C	; 108
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    15f0:	85 e6       	ldi	r24, 0x65	; 101
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('r');
    15fc:	82 e7       	ldi	r24, 0x72	; 114
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	61 e0       	ldi	r22, 0x01	; 1
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    1608:	81 e6       	ldi	r24, 0x61	; 97
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('t');
    1614:	84 e7       	ldi	r24, 0x74	; 116
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('i');
    1620:	89 e6       	ldi	r24, 0x69	; 105
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('o');
    162c:	8f e6       	ldi	r24, 0x6F	; 111
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('n');
    1638:	8e e6       	ldi	r24, 0x6E	; 110
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(15,1);
    1644:	8f e0       	ldi	r24, 0x0F	; 15
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	if(acceleration == 1)
    164c:	80 91 0a 01 	lds	r24, 0x010A
    1650:	90 91 0b 01 	lds	r25, 0x010B
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	39 f4       	brne	.+14     	; 0x1668 <init_settings+0x1ae>
	{
		lcd_write_data(1);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <init_settings+0x1ba>
	}
	else
	{
		lcd_write_data(0);
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}

}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <toggle_acceleration>:


void toggle_acceleration(){
	lcd_gotoxy(15,1);
    167e:	8f e0       	ldi	r24, 0x0F	; 15
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	if(acceleration == 1)
    1686:	80 91 0a 01 	lds	r24, 0x010A
    168a:	90 91 0b 01 	lds	r25, 0x010B
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	59 f4       	brne	.+22     	; 0x16aa <toggle_acceleration+0x2c>
	{
		
		lcd_write_data(0);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		acceleration = 0;
    16a0:	10 92 0b 01 	sts	0x010B, r1
    16a4:	10 92 0a 01 	sts	0x010A, r1
    16a8:	08 95       	ret
	}
	else
	{
		lcd_write_data(1);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		acceleration = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	90 93 0b 01 	sts	0x010B, r25
    16be:	80 93 0a 01 	sts	0x010A, r24
    16c2:	08 95       	ret

000016c4 <init_scores>:
int letters[3];
//If char has been selected
int written = 0;

void init_scores(void)
{
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <init_scores+0xe>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <init_scores+0x10>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <init_scores+0x12>
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	0f 2e       	mov	r0, r31
    16dc:	fc e6       	ldi	r31, 0x6C	; 108
    16de:	ef 2e       	mov	r14, r31
    16e0:	f3 e0       	ldi	r31, 0x03	; 3
    16e2:	ff 2e       	mov	r15, r31
    16e4:	f0 2d       	mov	r31, r0
    16e6:	00 e4       	ldi	r16, 0x40	; 64
    16e8:	10 e0       	ldi	r17, 0x00	; 0
	//Add left arrow char
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+i);
    16ea:	c8 01       	movw	r24, r16
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__csettings[i+16]);
    16f4:	f7 01       	movw	r30, r14
    16f6:	81 91       	ld	r24, Z+
    16f8:	7f 01       	movw	r14, r30
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1704:	0f 5f       	subi	r16, 0xFF	; 255
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
int written = 0;

void init_scores(void)
{
	//Add left arrow char
	for(int i=0;i<8;i++)
    1708:	08 34       	cpi	r16, 0x48	; 72
    170a:	11 05       	cpc	r17, r1
    170c:	71 f7       	brne	.-36     	; 0x16ea <init_scores+0x26>
		lcd_write_ctrl(LCD_CGRAM+i);
		lcd_write_data(__csettings[i+16]);
	}


	lcd_write_ctrl(LCD_CLEAR);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	

	char name[3];
	lcd_gotoxy(1,1);
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	//Read high score initials
	eeprom_read_block((void*)&name, 0x10, 3);
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	60 e1       	ldi	r22, 0x10	; 16
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	43 e0       	ldi	r20, 0x03	; 3
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	0e 94 9e 13 	call	0x273c	; 0x273c <__eerd_block_m128>
	//Write initials
	if(name[0]!=0)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	88 23       	and	r24, r24
    1736:	31 f0       	breq	.+12     	; 0x1744 <init_scores+0x80>
	{
		lcd_write_data(name[0]);
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <init_scores+0x8c>
	}
	else
	{
		lcd_write_data(' ');
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}
	if(name[1]!=0)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	88 23       	and	r24, r24
    1754:	31 f0       	breq	.+12     	; 0x1762 <init_scores+0x9e>
	{
		lcd_write_data(name[1]);
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1760:	06 c0       	rjmp	.+12     	; 0x176e <init_scores+0xaa>
	}
	else
	{
		lcd_write_data(' ');
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}
	if(name[2]!=0)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 23       	and	r24, r24
    1772:	31 f0       	breq	.+12     	; 0x1780 <init_scores+0xbc>
	{
		lcd_write_data(name[2]);
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    177e:	06 c0       	rjmp	.+12     	; 0x178c <init_scores+0xc8>
	}
	else
	{
		lcd_write_data(' ');
    1780:	80 e2       	ldi	r24, 0x20	; 32
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}

	lcd_write_data(' ');
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('L');
    1798:	8c e4       	ldi	r24, 0x4C	; 76
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	char slevel[3];
	//Read level of high score
	eeprom_read_block((void*)&slevel, 0x15, 3);
    17a4:	ce 01       	movw	r24, r28
    17a6:	04 96       	adiw	r24, 0x04	; 4
    17a8:	65 e1       	ldi	r22, 0x15	; 21
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	43 e0       	ldi	r20, 0x03	; 3
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	0e 94 9e 13 	call	0x273c	; 0x273c <__eerd_block_m128>
	//print level
	if(slevel[0]!=0)
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	88 23       	and	r24, r24
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <init_scores+0x102>
	{
		lcd_write_data(slevel[0]);
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <init_scores+0x10e>
	}
	else
	{
		lcd_write_data(' ');
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}
	if(slevel[1]!=0)
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	88 23       	and	r24, r24
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <init_scores+0x120>
	{
		lcd_write_data(slevel[1]);
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <init_scores+0x12c>
	}
	else
	{
		lcd_write_data(' ');
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}
	if(slevel[2]!=0)
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	88 23       	and	r24, r24
    17f4:	31 f0       	breq	.+12     	; 0x1802 <init_scores+0x13e>
	{
		lcd_write_data(slevel[2]);
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    1800:	06 c0       	rjmp	.+12     	; 0x180e <init_scores+0x14a>
	}
	else
	{
		lcd_write_data(' ');
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	}
	
		
	lcd_gotoxy(0,0);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('H');
    1822:	88 e4       	ldi	r24, 0x48	; 72
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('i');
    182e:	89 e6       	ldi	r24, 0x69	; 105
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('g');
    183a:	87 e6       	ldi	r24, 0x67	; 103
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('h');
    1846:	88 e6       	ldi	r24, 0x68	; 104
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	61 e0       	ldi	r22, 0x01	; 1
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('S');
    185e:	83 e5       	ldi	r24, 0x53	; 83
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('c');
    186a:	83 e6       	ldi	r24, 0x63	; 99
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('o');
    1876:	8f e6       	ldi	r24, 0x6F	; 111
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('r');
    1882:	82 e7       	ldi	r24, 0x72	; 114
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    188e:	85 e6       	ldi	r24, 0x65	; 101
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	
}
    189a:	26 96       	adiw	r28, 0x06	; 6
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	08 95       	ret

000018b4 <init_game_over>:

void init_game_over(){
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <init_game_over+0xe>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
	start_timer_for_randomizer();
    18c8:	0e 94 32 07 	call	0xe64	; 0xe64 <start_timer_for_randomizer>
	menu = 4;
    18cc:	84 e0       	ldi	r24, 0x04	; 4
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	90 93 05 01 	sts	0x0105, r25
    18d4:	80 93 04 01 	sts	0x0104, r24
	menu_scores = 2;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	90 93 07 01 	sts	0x0107, r25
    18e0:	80 93 06 01 	sts	0x0106, r24
    18e4:	0f 2e       	mov	r0, r31
    18e6:	f4 e5       	ldi	r31, 0x54	; 84
    18e8:	ef 2e       	mov	r14, r31
    18ea:	f3 e0       	ldi	r31, 0x03	; 3
    18ec:	ff 2e       	mov	r15, r31
    18ee:	f0 2d       	mov	r31, r0
    18f0:	00 e4       	ldi	r16, 0x40	; 64
    18f2:	10 e0       	ldi	r17, 0x00	; 0
	
	//Add char right arrow
	for(int i=0;i<8;i++)
	{
		lcd_write_ctrl(LCD_CGRAM+i);
    18f4:	c8 01       	movw	r24, r16
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_write_data(__cmenu[i]);
    18fe:	f7 01       	movw	r30, r14
    1900:	81 91       	ld	r24, Z+
    1902:	7f 01       	movw	r14, r30
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
    190e:	0f 5f       	subi	r16, 0xFF	; 255
    1910:	1f 4f       	sbci	r17, 0xFF	; 255
	start_timer_for_randomizer();
	menu = 4;
	menu_scores = 2;
	
	//Add char right arrow
	for(int i=0;i<8;i++)
    1912:	08 34       	cpi	r16, 0x48	; 72
    1914:	11 05       	cpc	r17, r1
    1916:	71 f7       	brne	.-36     	; 0x18f4 <init_game_over+0x40>
	{
		lcd_write_ctrl(LCD_CGRAM+i);
		lcd_write_data(__cmenu[i]);
	}
	//Sound of game over
	init_sound_timers(game_over_sound, end_times);
    1918:	8c e0       	ldi	r24, 0x0C	; 12
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	62 e5       	ldi	r22, 0x52	; 82
    191e:	71 e0       	ldi	r23, 0x01	; 1
    1920:	0e 94 11 09 	call	0x1222	; 0x1222 <init_sound_timers>

	lcd_write_ctrl(LCD_CLEAR);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_gotoxy(0,0);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('G');
    1938:	87 e4       	ldi	r24, 0x47	; 71
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    1944:	81 e6       	ldi	r24, 0x61	; 97
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('m');
    1950:	8d e6       	ldi	r24, 0x6D	; 109
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    195c:	85 e6       	ldi	r24, 0x65	; 101
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('O');
    1974:	8f e4       	ldi	r24, 0x4F	; 79
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('v');
    1980:	86 e7       	ldi	r24, 0x76	; 118
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    198c:	85 e6       	ldi	r24, 0x65	; 101
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('r');
    1998:	82 e7       	ldi	r24, 0x72	; 114
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(0,1);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('L');
    19ac:	8c e4       	ldi	r24, 0x4C	; 76
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    19b8:	80 e2       	ldi	r24, 0x20	; 32
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	char slevel[3];
	itoa(level,slevel,10);
    19c4:	80 91 ca 04 	lds	r24, 0x04CA
    19c8:	90 91 cb 04 	lds	r25, 0x04CB
    19cc:	be 01       	movw	r22, r28
    19ce:	6f 5f       	subi	r22, 0xFF	; 255
    19d0:	7f 4f       	sbci	r23, 0xFF	; 255
    19d2:	4a e0       	ldi	r20, 0x0A	; 10
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <itoa>
	//Clean level string
	if(level<10)
    19da:	80 91 ca 04 	lds	r24, 0x04CA
    19de:	90 91 cb 04 	lds	r25, 0x04CB
    19e2:	8a 30       	cpi	r24, 0x0A	; 10
    19e4:	91 05       	cpc	r25, r1
    19e6:	24 f4       	brge	.+8      	; 0x19f0 <init_game_over+0x13c>
	{
		slevel[1] = ' ';
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	8a 83       	std	Y+2, r24	; 0x02
		slevel[2] = ' ';
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <init_game_over+0x146>
	}
	else if(level<100)
    19f0:	84 36       	cpi	r24, 0x64	; 100
    19f2:	91 05       	cpc	r25, r1
    19f4:	14 f4       	brge	.+4      	; 0x19fa <init_game_over+0x146>
	{
		slevel[2] = ' ';
    19f6:	80 e2       	ldi	r24, 0x20	; 32
    19f8:	8b 83       	std	Y+3, r24	; 0x03
	}
	//print level
	lcd_write_data(slevel[0]);
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(slevel[1]);
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(slevel[2]);
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(9,1);
    1a2a:	89 e0       	ldi	r24, 0x09	; 9
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	61 e0       	ldi	r22, 0x01	; 1
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('R');
    1a3e:	82 e5       	ldi	r24, 0x52	; 82
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1a4a:	85 e6       	ldi	r24, 0x65	; 101
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('p');
    1a56:	80 e7       	ldi	r24, 0x70	; 112
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	61 e0       	ldi	r22, 0x01	; 1
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('l');
    1a62:	8c e6       	ldi	r24, 0x6C	; 108
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    1a6e:	81 e6       	ldi	r24, 0x61	; 97
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('y');
    1a7a:	89 e7       	ldi	r24, 0x79	; 121
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(12,0);
    1a86:	8c e0       	ldi	r24, 0x0C	; 12
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('M');
    1a8e:	8d e4       	ldi	r24, 0x4D	; 77
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1a9a:	85 e6       	ldi	r24, 0x65	; 101
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('n');
    1aa6:	8e e6       	ldi	r24, 0x6E	; 110
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('u');
    1ab2:	85 e7       	ldi	r24, 0x75	; 117
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	08 95       	ret

00001ad2 <init_high_scores>:

void init_high_scores(){
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <init_high_scores+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	start_timer_for_randomizer();
    1ade:	0e 94 32 07 	call	0xe64	; 0xe64 <start_timer_for_randomizer>
	//Make sound of high score
	init_sound_timers(high_score_sound, high_score_times);
    1ae2:	88 e2       	ldi	r24, 0x28	; 40
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	64 e4       	ldi	r22, 0x44	; 68
    1ae8:	71 e0       	ldi	r23, 0x01	; 1
    1aea:	0e 94 11 09 	call	0x1222	; 0x1222 <init_sound_timers>

	menu = 5;
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	90 93 05 01 	sts	0x0105, r25
    1af6:	80 93 04 01 	sts	0x0104, r24
	lcd_write_ctrl(LCD_CLEAR);
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_gotoxy(0,0);
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data('N');
    1b0e:	8e e4       	ldi	r24, 0x4E	; 78
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1b1a:	85 e6       	ldi	r24, 0x65	; 101
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	70 e0       	ldi	r23, 0x00	; 0
    1b22:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('w');
    1b26:	87 e7       	ldi	r24, 0x77	; 119
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('H');
    1b3e:	88 e4       	ldi	r24, 0x48	; 72
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('i');
    1b4a:	89 e6       	ldi	r24, 0x69	; 105
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('g');
    1b56:	87 e6       	ldi	r24, 0x67	; 103
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('h');
    1b62:	88 e6       	ldi	r24, 0x68	; 104
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1b6e:	80 e2       	ldi	r24, 0x20	; 32
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('S');
    1b7a:	83 e5       	ldi	r24, 0x53	; 83
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	61 e0       	ldi	r22, 0x01	; 1
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('c');
    1b86:	83 e6       	ldi	r24, 0x63	; 99
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('o');
    1b92:	8f e6       	ldi	r24, 0x6F	; 111
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('r');
    1b9e:	82 e7       	ldi	r24, 0x72	; 114
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1baa:	85 e6       	ldi	r24, 0x65	; 101
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	lcd_gotoxy(0,1);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>

	lcd_write_data('L');
    1bbe:	8c e4       	ldi	r24, 0x4C	; 76
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

	char slevel[3];
	itoa(level,slevel,10);
    1bd6:	80 91 ca 04 	lds	r24, 0x04CA
    1bda:	90 91 cb 04 	lds	r25, 0x04CB
    1bde:	be 01       	movw	r22, r28
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	4a e0       	ldi	r20, 0x0A	; 10
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	0e 94 7d 13 	call	0x26fa	; 0x26fa <itoa>
	//Clean level string
	if(level<10)
    1bec:	80 91 ca 04 	lds	r24, 0x04CA
    1bf0:	90 91 cb 04 	lds	r25, 0x04CB
    1bf4:	8a 30       	cpi	r24, 0x0A	; 10
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	24 f4       	brge	.+8      	; 0x1c02 <init_high_scores+0x130>
	{
		slevel[1] = ' ';
    1bfa:	80 e2       	ldi	r24, 0x20	; 32
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
		slevel[2] = ' ';
    1bfe:	8b 83       	std	Y+3, r24	; 0x03
    1c00:	05 c0       	rjmp	.+10     	; 0x1c0c <init_high_scores+0x13a>
	}
	else if(level<100)
    1c02:	84 36       	cpi	r24, 0x64	; 100
    1c04:	91 05       	cpc	r25, r1
    1c06:	14 f4       	brge	.+4      	; 0x1c0c <init_high_scores+0x13a>
	{
		slevel[2] = ' ';
    1c08:	80 e2       	ldi	r24, 0x20	; 32
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
	}
	//Print level
	lcd_write_data(slevel[0]);
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(slevel[1]);
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(slevel[2]);
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(' ');
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('N');
    1c3c:	8e e4       	ldi	r24, 0x4E	; 78
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('a');
    1c48:	81 e6       	ldi	r24, 0x61	; 97
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('m');
    1c54:	8d e6       	ldi	r24, 0x6D	; 109
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data('e');
    1c60:	85 e6       	ldi	r24, 0x65	; 101
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_write_data(':');
    1c6c:	8a e3       	ldi	r24, 0x3A	; 58
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	
	//Start blinking
	lcd_gotoxy(11,1);
    1c78:	8b e0       	ldi	r24, 0x0B	; 11
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_ctrl(0x0D);
    1c80:	8d e0       	ldi	r24, 0x0D	; 13
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>

}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <save_scores>:

void save_scores(){
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <save_scores+0x6>
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	//Stop blinking
	lcd_write_ctrl(LCD_ON);
    1ca4:	8c e0       	ldi	r24, 0x0C	; 12
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	char slevel[3];
	itoa(level,slevel,10);
    1cb0:	80 91 ca 04 	lds	r24, 0x04CA
    1cb4:	90 91 cb 04 	lds	r25, 0x04CB
    1cb8:	be 01       	movw	r22, r28
    1cba:	6f 5f       	subi	r22, 0xFF	; 255
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	4a e0       	ldi	r20, 0x0A	; 10
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <itoa>
	//Clean level string
	if(level<10)
    1cc6:	80 91 ca 04 	lds	r24, 0x04CA
    1cca:	90 91 cb 04 	lds	r25, 0x04CB
    1cce:	8a 30       	cpi	r24, 0x0A	; 10
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	24 f4       	brge	.+8      	; 0x1cdc <save_scores+0x44>
	{
		slevel[1] = ' ';
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
		slevel[2] = ' ';
    1cd8:	8b 83       	std	Y+3, r24	; 0x03
    1cda:	05 c0       	rjmp	.+10     	; 0x1ce6 <save_scores+0x4e>
	}
	else if(level<100)
    1cdc:	84 36       	cpi	r24, 0x64	; 100
    1cde:	91 05       	cpc	r25, r1
    1ce0:	14 f4       	brge	.+4      	; 0x1ce6 <save_scores+0x4e>
	{
		slevel[2] = ' ';
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
	}
	//Store on EEPROM level
	eeprom_write_block((void*)&slevel,0x15,3);
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	65 e1       	ldi	r22, 0x15	; 21
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	43 e0       	ldi	r20, 0x03	; 3
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	0e 94 b6 13 	call	0x276c	; 0x276c <__eewr_block_m128>
	eeprom_write_byte(0x05,level);
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	60 91 ca 04 	lds	r22, 0x04CA
    1cfe:	0e 94 c0 13 	call	0x2780	; 0x2780 <__eewr_byte_m128>
	//Store on EEPROM initials
	eeprom_write_byte(0x10,letters[0]);
    1d02:	80 e1       	ldi	r24, 0x10	; 16
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	60 91 f2 04 	lds	r22, 0x04F2
    1d0a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__eewr_byte_m128>
	eeprom_write_byte(0x11,letters[1]);
    1d0e:	81 e1       	ldi	r24, 0x11	; 17
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	60 91 f4 04 	lds	r22, 0x04F4
    1d16:	0e 94 c0 13 	call	0x2780	; 0x2780 <__eewr_byte_m128>
	eeprom_write_byte(0x12,letters[2]);
    1d1a:	82 e1       	ldi	r24, 0x12	; 18
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	60 91 f6 04 	lds	r22, 0x04F6
    1d22:	0e 94 c0 13 	call	0x2780	; 0x2780 <__eewr_byte_m128>
	//Initialize Main menu
	init_menu();
    1d26:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <init_menu>
	menu = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	90 93 05 01 	sts	0x0105, r25
    1d32:	80 93 04 01 	sts	0x0104, r24
	start = 0;
    1d36:	10 92 09 01 	sts	0x0109, r1
    1d3a:	10 92 08 01 	sts	0x0108, r1
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <menu_scores_move_menu>:

//Move selection to main menu (game over menu)
void menu_scores_move_menu(){
	lcd_gotoxy(9,1);
    1d4a:	89 e0       	ldi	r24, 0x09	; 9
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(' ');
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_gotoxy(11,0);
    1d5e:	8b e0       	ldi	r24, 0x0B	; 11
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	menu_scores = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	90 93 07 01 	sts	0x0107, r25
    1d7a:	80 93 06 01 	sts	0x0106, r24
	
}
    1d7e:	08 95       	ret

00001d80 <menu_scores_move_replay>:

//Move selection to replay (game over menu)
void menu_scores_move_replay(){
	lcd_gotoxy(11,0);
    1d80:	8b e0       	ldi	r24, 0x0B	; 11
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(' ');
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	lcd_gotoxy(9,1);
    1d94:	89 e0       	ldi	r24, 0x09	; 9
    1d96:	61 e0       	ldi	r22, 0x01	; 1
    1d98:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
	lcd_write_data(0);
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
	menu_scores = 2;
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	90 93 07 01 	sts	0x0107, r25
    1db0:	80 93 06 01 	sts	0x0106, r24
}
    1db4:	08 95       	ret

00001db6 <increase_letter>:

//Increase letter (new high score menu)
void increase_letter()
{
	if(number_letter!=3) //All initials not written
    1db6:	80 91 88 04 	lds	r24, 0x0488
    1dba:	90 91 89 04 	lds	r25, 0x0489
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	61 f1       	breq	.+88     	; 0x1e1c <increase_letter+0x66>
	{
		written = 1;
    1dc4:	21 e0       	ldi	r18, 0x01	; 1
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	30 93 8b 04 	sts	0x048B, r19
    1dcc:	20 93 8a 04 	sts	0x048A, r18
		if(letter >= 90)
    1dd0:	20 91 74 03 	lds	r18, 0x0374
    1dd4:	30 91 75 03 	lds	r19, 0x0375
    1dd8:	2a 35       	cpi	r18, 0x5A	; 90
    1dda:	31 05       	cpc	r19, r1
    1ddc:	3c f0       	brlt	.+14     	; 0x1dec <increase_letter+0x36>
		{
			letter = 65;
    1dde:	21 e4       	ldi	r18, 0x41	; 65
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	30 93 75 03 	sts	0x0375, r19
    1de6:	20 93 74 03 	sts	0x0374, r18
    1dea:	06 c0       	rjmp	.+12     	; 0x1df8 <increase_letter+0x42>
		}
		else
		{
			letter++;
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	30 93 75 03 	sts	0x0375, r19
    1df4:	20 93 74 03 	sts	0x0374, r18
		}
		lcd_gotoxy(11+number_letter,1);
    1df8:	85 5f       	subi	r24, 0xF5	; 245
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
		lcd_write_data(letter);
    1e00:	80 91 74 03 	lds	r24, 0x0374
    1e04:	90 91 75 03 	lds	r25, 0x0375
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_gotoxy(11+number_letter,1);
    1e10:	80 91 88 04 	lds	r24, 0x0488
    1e14:	85 5f       	subi	r24, 0xF5	; 245
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
    1e1c:	08 95       	ret

00001e1e <decrease_letter>:
	
}

//Decreasae letter (new high score menu)
void decrease_letter(){
	if(number_letter!=3) //All initials not written
    1e1e:	80 91 88 04 	lds	r24, 0x0488
    1e22:	90 91 89 04 	lds	r25, 0x0489
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	61 f1       	breq	.+88     	; 0x1e84 <decrease_letter+0x66>
	{
		written = 1;
    1e2c:	21 e0       	ldi	r18, 0x01	; 1
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	30 93 8b 04 	sts	0x048B, r19
    1e34:	20 93 8a 04 	sts	0x048A, r18
		if(letter <= 65)
    1e38:	20 91 74 03 	lds	r18, 0x0374
    1e3c:	30 91 75 03 	lds	r19, 0x0375
    1e40:	22 34       	cpi	r18, 0x42	; 66
    1e42:	31 05       	cpc	r19, r1
    1e44:	3c f4       	brge	.+14     	; 0x1e54 <decrease_letter+0x36>
		{
			letter = 90;
    1e46:	2a e5       	ldi	r18, 0x5A	; 90
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	30 93 75 03 	sts	0x0375, r19
    1e4e:	20 93 74 03 	sts	0x0374, r18
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <decrease_letter+0x42>
		}
		else
		{
			letter--;
    1e54:	21 50       	subi	r18, 0x01	; 1
    1e56:	30 40       	sbci	r19, 0x00	; 0
    1e58:	30 93 75 03 	sts	0x0375, r19
    1e5c:	20 93 74 03 	sts	0x0374, r18
		}
		lcd_gotoxy(11+number_letter,1);
    1e60:	85 5f       	subi	r24, 0xF5	; 245
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
		lcd_write_data(letter);
    1e68:	80 91 74 03 	lds	r24, 0x0374
    1e6c:	90 91 75 03 	lds	r25, 0x0375
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	0e 94 af 06 	call	0xd5e	; 0xd5e <lcd_write>
		lcd_gotoxy(11+number_letter,1);
    1e78:	80 91 88 04 	lds	r24, 0x0488
    1e7c:	85 5f       	subi	r24, 0xF5	; 245
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
    1e84:	08 95       	ret

00001e86 <select_letter>:
}

//Select initial and move to next or store high score
void select_letter()
{
	if(written==1)
    1e86:	80 91 8a 04 	lds	r24, 0x048A
    1e8a:	90 91 8b 04 	lds	r25, 0x048B
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	c9 f5       	brne	.+114    	; 0x1f06 <select_letter+0x80>
	{
		letters[number_letter]=letter;
    1e94:	80 91 88 04 	lds	r24, 0x0488
    1e98:	90 91 89 04 	lds	r25, 0x0489
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	ee 50       	subi	r30, 0x0E	; 14
    1ea4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea6:	20 91 74 03 	lds	r18, 0x0374
    1eaa:	30 91 75 03 	lds	r19, 0x0375
    1eae:	31 83       	std	Z+1, r19	; 0x01
    1eb0:	20 83       	st	Z, r18
		letter = 65;
    1eb2:	21 e4       	ldi	r18, 0x41	; 65
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	30 93 75 03 	sts	0x0375, r19
    1eba:	20 93 74 03 	sts	0x0374, r18
		number_letter++;
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	90 93 89 04 	sts	0x0489, r25
    1ec4:	80 93 88 04 	sts	0x0488, r24
		written = 0;
    1ec8:	10 92 8b 04 	sts	0x048B, r1
    1ecc:	10 92 8a 04 	sts	0x048A, r1
		lcd_gotoxy(11+number_letter,1);
    1ed0:	85 5f       	subi	r24, 0xF5	; 245
    1ed2:	61 e0       	ldi	r22, 0x01	; 1
    1ed4:	0e 94 20 07 	call	0xe40	; 0xe40 <lcd_gotoxy>
		if(number_letter==3)
    1ed8:	80 91 88 04 	lds	r24, 0x0488
    1edc:	90 91 89 04 	lds	r25, 0x0489
    1ee0:	83 30       	cpi	r24, 0x03	; 3
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	81 f4       	brne	.+32     	; 0x1f06 <select_letter+0x80>
		{
			number_letter = 0;
    1ee6:	10 92 89 04 	sts	0x0489, r1
    1eea:	10 92 88 04 	sts	0x0488, r1
			written = 0;
    1eee:	10 92 8b 04 	sts	0x048B, r1
    1ef2:	10 92 8a 04 	sts	0x048A, r1
			letter = 65;
    1ef6:	81 e4       	ldi	r24, 0x41	; 65
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	90 93 75 03 	sts	0x0375, r25
    1efe:	80 93 74 03 	sts	0x0374, r24
			save_scores();
    1f02:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <save_scores>
    1f06:	08 95       	ret

00001f08 <__mulsf3>:
    1f08:	a0 e2       	ldi	r26, 0x20	; 32
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	ea e8       	ldi	r30, 0x8A	; 138
    1f0e:	ff e0       	ldi	r31, 0x0F	; 15
    1f10:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__>
    1f14:	69 83       	std	Y+1, r22	; 0x01
    1f16:	7a 83       	std	Y+2, r23	; 0x02
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	2d 83       	std	Y+5, r18	; 0x05
    1f1e:	3e 83       	std	Y+6, r19	; 0x06
    1f20:	4f 83       	std	Y+7, r20	; 0x07
    1f22:	58 87       	std	Y+8, r21	; 0x08
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	be 01       	movw	r22, r28
    1f2a:	67 5f       	subi	r22, 0xF7	; 247
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__unpack_f>
    1f32:	ce 01       	movw	r24, r28
    1f34:	05 96       	adiw	r24, 0x05	; 5
    1f36:	be 01       	movw	r22, r28
    1f38:	6f 5e       	subi	r22, 0xEF	; 239
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__unpack_f>
    1f40:	99 85       	ldd	r25, Y+9	; 0x09
    1f42:	92 30       	cpi	r25, 0x02	; 2
    1f44:	78 f0       	brcs	.+30     	; 0x1f64 <__mulsf3+0x5c>
    1f46:	89 89       	ldd	r24, Y+17	; 0x11
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	c0 f0       	brcs	.+48     	; 0x1f7c <__mulsf3+0x74>
    1f4c:	94 30       	cpi	r25, 0x04	; 4
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <__mulsf3+0x4e>
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	41 f4       	brne	.+16     	; 0x1f64 <__mulsf3+0x5c>
    1f54:	cb c0       	rjmp	.+406    	; 0x20ec <__mulsf3+0x1e4>
    1f56:	84 30       	cpi	r24, 0x04	; 4
    1f58:	19 f4       	brne	.+6      	; 0x1f60 <__mulsf3+0x58>
    1f5a:	92 30       	cpi	r25, 0x02	; 2
    1f5c:	79 f4       	brne	.+30     	; 0x1f7c <__mulsf3+0x74>
    1f5e:	c6 c0       	rjmp	.+396    	; 0x20ec <__mulsf3+0x1e4>
    1f60:	92 30       	cpi	r25, 0x02	; 2
    1f62:	51 f4       	brne	.+20     	; 0x1f78 <__mulsf3+0x70>
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f68:	9a 89       	ldd	r25, Y+18	; 0x12
    1f6a:	29 17       	cp	r18, r25
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <__mulsf3+0x68>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	8a 87       	std	Y+10, r24	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bc c0       	rjmp	.+376    	; 0x20f0 <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	51 f4       	brne	.+20     	; 0x1f90 <__mulsf3+0x88>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f80:	9a 89       	ldd	r25, Y+18	; 0x12
    1f82:	29 17       	cp	r18, r25
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <__mulsf3+0x80>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	8a 8b       	std	Y+18, r24	; 0x12
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	41 96       	adiw	r24, 0x11	; 17
    1f8e:	b0 c0       	rjmp	.+352    	; 0x20f0 <__mulsf3+0x1e8>
    1f90:	6d 84       	ldd	r6, Y+13	; 0x0d
    1f92:	7e 84       	ldd	r7, Y+14	; 0x0e
    1f94:	8f 84       	ldd	r8, Y+15	; 0x0f
    1f96:	98 88       	ldd	r9, Y+16	; 0x10
    1f98:	ed 88       	ldd	r14, Y+21	; 0x15
    1f9a:	fe 88       	ldd	r15, Y+22	; 0x16
    1f9c:	0f 89       	ldd	r16, Y+23	; 0x17
    1f9e:	18 8d       	ldd	r17, Y+24	; 0x18
    1fa0:	e0 e2       	ldi	r30, 0x20	; 32
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	dc 01       	movw	r26, r24
    1faa:	aa 24       	eor	r10, r10
    1fac:	bb 24       	eor	r11, r11
    1fae:	65 01       	movw	r12, r10
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	b3 01       	movw	r22, r6
    1fb8:	61 70       	andi	r22, 0x01	; 1
    1fba:	70 70       	andi	r23, 0x00	; 0
    1fbc:	61 15       	cp	r22, r1
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	d1 f0       	breq	.+52     	; 0x1ff6 <__mulsf3+0xee>
    1fc2:	2e 0d       	add	r18, r14
    1fc4:	3f 1d       	adc	r19, r15
    1fc6:	40 1f       	adc	r20, r16
    1fc8:	51 1f       	adc	r21, r17
    1fca:	15 01       	movw	r2, r10
    1fcc:	26 01       	movw	r4, r12
    1fce:	28 0e       	add	r2, r24
    1fd0:	39 1e       	adc	r3, r25
    1fd2:	4a 1e       	adc	r4, r26
    1fd4:	5b 1e       	adc	r5, r27
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	2e 15       	cp	r18, r14
    1fe0:	3f 05       	cpc	r19, r15
    1fe2:	40 07       	cpc	r20, r16
    1fe4:	51 07       	cpc	r21, r17
    1fe6:	18 f0       	brcs	.+6      	; 0x1fee <__mulsf3+0xe6>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	dc 01       	movw	r26, r24
    1fee:	82 0d       	add	r24, r2
    1ff0:	93 1d       	adc	r25, r3
    1ff2:	a4 1d       	adc	r26, r4
    1ff4:	b5 1d       	adc	r27, r5
    1ff6:	aa 0c       	add	r10, r10
    1ff8:	bb 1c       	adc	r11, r11
    1ffa:	cc 1c       	adc	r12, r12
    1ffc:	dd 1c       	adc	r13, r13
    1ffe:	17 ff       	sbrs	r17, 7
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <__mulsf3+0x10c>
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	26 2e       	mov	r2, r22
    2006:	31 2c       	mov	r3, r1
    2008:	41 2c       	mov	r4, r1
    200a:	51 2c       	mov	r5, r1
    200c:	a2 28       	or	r10, r2
    200e:	b3 28       	or	r11, r3
    2010:	c4 28       	or	r12, r4
    2012:	d5 28       	or	r13, r5
    2014:	31 97       	sbiw	r30, 0x01	; 1
    2016:	49 f0       	breq	.+18     	; 0x202a <__mulsf3+0x122>
    2018:	ee 0c       	add	r14, r14
    201a:	ff 1c       	adc	r15, r15
    201c:	00 1f       	adc	r16, r16
    201e:	11 1f       	adc	r17, r17
    2020:	96 94       	lsr	r9
    2022:	87 94       	ror	r8
    2024:	77 94       	ror	r7
    2026:	67 94       	ror	r6
    2028:	c6 cf       	rjmp	.-116    	; 0x1fb6 <__mulsf3+0xae>
    202a:	6b 89       	ldd	r22, Y+19	; 0x13
    202c:	7c 89       	ldd	r23, Y+20	; 0x14
    202e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2030:	fc 85       	ldd	r31, Y+12	; 0x0c
    2032:	6e 0f       	add	r22, r30
    2034:	7f 1f       	adc	r23, r31
    2036:	6e 5f       	subi	r22, 0xFE	; 254
    2038:	7f 4f       	sbci	r23, 0xFF	; 255
    203a:	7c 8f       	std	Y+28, r23	; 0x1c
    203c:	6b 8f       	std	Y+27, r22	; 0x1b
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	ea 85       	ldd	r30, Y+10	; 0x0a
    2042:	7a 89       	ldd	r23, Y+18	; 0x12
    2044:	e7 17       	cp	r30, r23
    2046:	09 f4       	brne	.+2      	; 0x204a <__mulsf3+0x142>
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	6a 8f       	std	Y+26, r22	; 0x1a
    204c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    204e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2050:	10 c0       	rjmp	.+32     	; 0x2072 <__mulsf3+0x16a>
    2052:	fc 01       	movw	r30, r24
    2054:	e1 70       	andi	r30, 0x01	; 1
    2056:	f0 70       	andi	r31, 0x00	; 0
    2058:	30 97       	sbiw	r30, 0x00	; 0
    205a:	29 f0       	breq	.+10     	; 0x2066 <__mulsf3+0x15e>
    205c:	56 95       	lsr	r21
    205e:	47 95       	ror	r20
    2060:	37 95       	ror	r19
    2062:	27 95       	ror	r18
    2064:	50 68       	ori	r21, 0x80	; 128
    2066:	b6 95       	lsr	r27
    2068:	a7 95       	ror	r26
    206a:	97 95       	ror	r25
    206c:	87 95       	ror	r24
    206e:	6f 5f       	subi	r22, 0xFF	; 255
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	b7 fd       	sbrc	r27, 7
    2074:	ee cf       	rjmp	.-36     	; 0x2052 <__mulsf3+0x14a>
    2076:	0c c0       	rjmp	.+24     	; 0x2090 <__mulsf3+0x188>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	57 fd       	sbrc	r21, 7
    2082:	81 60       	ori	r24, 0x01	; 1
    2084:	22 0f       	add	r18, r18
    2086:	33 1f       	adc	r19, r19
    2088:	44 1f       	adc	r20, r20
    208a:	55 1f       	adc	r21, r21
    208c:	61 50       	subi	r22, 0x01	; 1
    208e:	70 40       	sbci	r23, 0x00	; 0
    2090:	80 30       	cpi	r24, 0x00	; 0
    2092:	e0 e0       	ldi	r30, 0x00	; 0
    2094:	9e 07       	cpc	r25, r30
    2096:	e0 e0       	ldi	r30, 0x00	; 0
    2098:	ae 07       	cpc	r26, r30
    209a:	e0 e4       	ldi	r30, 0x40	; 64
    209c:	be 07       	cpc	r27, r30
    209e:	60 f3       	brcs	.-40     	; 0x2078 <__mulsf3+0x170>
    20a0:	6b 8f       	std	Y+27, r22	; 0x1b
    20a2:	7c 8f       	std	Y+28, r23	; 0x1c
    20a4:	6f e7       	ldi	r22, 0x7F	; 127
    20a6:	e6 2e       	mov	r14, r22
    20a8:	f1 2c       	mov	r15, r1
    20aa:	01 2d       	mov	r16, r1
    20ac:	11 2d       	mov	r17, r1
    20ae:	e8 22       	and	r14, r24
    20b0:	f9 22       	and	r15, r25
    20b2:	0a 23       	and	r16, r26
    20b4:	1b 23       	and	r17, r27
    20b6:	60 e4       	ldi	r22, 0x40	; 64
    20b8:	e6 16       	cp	r14, r22
    20ba:	f1 04       	cpc	r15, r1
    20bc:	01 05       	cpc	r16, r1
    20be:	11 05       	cpc	r17, r1
    20c0:	61 f4       	brne	.+24     	; 0x20da <__mulsf3+0x1d2>
    20c2:	87 fd       	sbrc	r24, 7
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <__mulsf3+0x1d2>
    20c6:	21 15       	cp	r18, r1
    20c8:	31 05       	cpc	r19, r1
    20ca:	41 05       	cpc	r20, r1
    20cc:	51 05       	cpc	r21, r1
    20ce:	29 f0       	breq	.+10     	; 0x20da <__mulsf3+0x1d2>
    20d0:	80 5c       	subi	r24, 0xC0	; 192
    20d2:	9f 4f       	sbci	r25, 0xFF	; 255
    20d4:	af 4f       	sbci	r26, 0xFF	; 255
    20d6:	bf 4f       	sbci	r27, 0xFF	; 255
    20d8:	80 78       	andi	r24, 0x80	; 128
    20da:	8d 8f       	std	Y+29, r24	; 0x1d
    20dc:	9e 8f       	std	Y+30, r25	; 0x1e
    20de:	af 8f       	std	Y+31, r26	; 0x1f
    20e0:	b8 a3       	std	Y+32, r27	; 0x20
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	89 8f       	std	Y+25, r24	; 0x19
    20e6:	ce 01       	movw	r24, r28
    20e8:	49 96       	adiw	r24, 0x19	; 25
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <__mulsf3+0x1e8>
    20ec:	86 e7       	ldi	r24, 0x76	; 118
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	0e 94 8a 11 	call	0x2314	; 0x2314 <__pack_f>
    20f4:	a0 96       	adiw	r28, 0x20	; 32
    20f6:	e2 e1       	ldi	r30, 0x12	; 18
    20f8:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__>

000020fc <__floatsisf>:
    20fc:	a8 e0       	ldi	r26, 0x08	; 8
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e4 e8       	ldi	r30, 0x84	; 132
    2102:	f0 e1       	ldi	r31, 0x10	; 16
    2104:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
    2108:	7b 01       	movw	r14, r22
    210a:	8c 01       	movw	r16, r24
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	d8 01       	movw	r26, r16
    2112:	c7 01       	movw	r24, r14
    2114:	88 27       	eor	r24, r24
    2116:	b7 fd       	sbrc	r27, 7
    2118:	83 95       	inc	r24
    211a:	99 27       	eor	r25, r25
    211c:	aa 27       	eor	r26, r26
    211e:	bb 27       	eor	r27, r27
    2120:	28 2f       	mov	r18, r24
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	e1 14       	cp	r14, r1
    2126:	f1 04       	cpc	r15, r1
    2128:	01 05       	cpc	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	19 f4       	brne	.+6      	; 0x2134 <__floatsisf+0x38>
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	37 c0       	rjmp	.+110    	; 0x21a2 <__floatsisf+0xa6>
    2134:	8e e1       	ldi	r24, 0x1E	; 30
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	8b 83       	std	Y+3, r24	; 0x03
    213c:	22 23       	and	r18, r18
    213e:	89 f0       	breq	.+34     	; 0x2162 <__floatsisf+0x66>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	e8 16       	cp	r14, r24
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	f8 06       	cpc	r15, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	08 07       	cpc	r16, r24
    214c:	80 e8       	ldi	r24, 0x80	; 128
    214e:	18 07       	cpc	r17, r24
    2150:	69 f1       	breq	.+90     	; 0x21ac <__floatsisf+0xb0>
    2152:	10 95       	com	r17
    2154:	00 95       	com	r16
    2156:	f0 94       	com	r15
    2158:	e0 94       	com	r14
    215a:	e1 1c       	adc	r14, r1
    215c:	f1 1c       	adc	r15, r1
    215e:	01 1d       	adc	r16, r1
    2160:	11 1d       	adc	r17, r1
    2162:	ed 82       	std	Y+5, r14	; 0x05
    2164:	fe 82       	std	Y+6, r15	; 0x06
    2166:	0f 83       	std	Y+7, r16	; 0x07
    2168:	18 87       	std	Y+8, r17	; 0x08
    216a:	c8 01       	movw	r24, r16
    216c:	b7 01       	movw	r22, r14
    216e:	0e 94 30 11 	call	0x2260	; 0x2260 <__clzsi2>
    2172:	9c 01       	movw	r18, r24
    2174:	21 50       	subi	r18, 0x01	; 1
    2176:	30 40       	sbci	r19, 0x00	; 0
    2178:	12 16       	cp	r1, r18
    217a:	13 06       	cpc	r1, r19
    217c:	94 f4       	brge	.+36     	; 0x21a2 <__floatsisf+0xa6>
    217e:	02 2e       	mov	r0, r18
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__floatsisf+0x8e>
    2182:	ee 0c       	add	r14, r14
    2184:	ff 1c       	adc	r15, r15
    2186:	00 1f       	adc	r16, r16
    2188:	11 1f       	adc	r17, r17
    218a:	0a 94       	dec	r0
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__floatsisf+0x86>
    218e:	ed 82       	std	Y+5, r14	; 0x05
    2190:	fe 82       	std	Y+6, r15	; 0x06
    2192:	0f 83       	std	Y+7, r16	; 0x07
    2194:	18 87       	std	Y+8, r17	; 0x08
    2196:	8e e1       	ldi	r24, 0x1E	; 30
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	82 1b       	sub	r24, r18
    219c:	93 0b       	sbc	r25, r19
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	ce 01       	movw	r24, r28
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	0e 94 8a 11 	call	0x2314	; 0x2314 <__pack_f>
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <__floatsisf+0xb8>
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	9f ec       	ldi	r25, 0xCF	; 207
    21b4:	28 96       	adiw	r28, 0x08	; 8
    21b6:	e6 e0       	ldi	r30, 0x06	; 6
    21b8:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

000021bc <__fixsfsi>:
    21bc:	ac e0       	ldi	r26, 0x0C	; 12
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e4 ee       	ldi	r30, 0xE4	; 228
    21c2:	f0 e1       	ldi	r31, 0x10	; 16
    21c4:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x20>
    21c8:	69 83       	std	Y+1, r22	; 0x01
    21ca:	7a 83       	std	Y+2, r23	; 0x02
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	be 01       	movw	r22, r28
    21d6:	6b 5f       	subi	r22, 0xFB	; 251
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__unpack_f>
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	82 30       	cpi	r24, 0x02	; 2
    21e2:	81 f1       	breq	.+96     	; 0x2244 <__fixsfsi+0x88>
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	70 f1       	brcs	.+92     	; 0x2244 <__fixsfsi+0x88>
    21e8:	84 30       	cpi	r24, 0x04	; 4
    21ea:	21 f4       	brne	.+8      	; 0x21f4 <__fixsfsi+0x38>
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	88 23       	and	r24, r24
    21f0:	69 f1       	breq	.+90     	; 0x224c <__fixsfsi+0x90>
    21f2:	0a c0       	rjmp	.+20     	; 0x2208 <__fixsfsi+0x4c>
    21f4:	2f 81       	ldd	r18, Y+7	; 0x07
    21f6:	38 85       	ldd	r19, Y+8	; 0x08
    21f8:	37 fd       	sbrc	r19, 7
    21fa:	24 c0       	rjmp	.+72     	; 0x2244 <__fixsfsi+0x88>
    21fc:	6e 81       	ldd	r22, Y+6	; 0x06
    21fe:	2f 31       	cpi	r18, 0x1F	; 31
    2200:	31 05       	cpc	r19, r1
    2202:	3c f0       	brlt	.+14     	; 0x2212 <__fixsfsi+0x56>
    2204:	66 23       	and	r22, r22
    2206:	11 f1       	breq	.+68     	; 0x224c <__fixsfsi+0x90>
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e8       	ldi	r21, 0x80	; 128
    2210:	21 c0       	rjmp	.+66     	; 0x2254 <__fixsfsi+0x98>
    2212:	8e e1       	ldi	r24, 0x1E	; 30
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	82 1b       	sub	r24, r18
    2218:	93 0b       	sbc	r25, r19
    221a:	29 85       	ldd	r18, Y+9	; 0x09
    221c:	3a 85       	ldd	r19, Y+10	; 0x0a
    221e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2220:	5c 85       	ldd	r21, Y+12	; 0x0c
    2222:	04 c0       	rjmp	.+8      	; 0x222c <__fixsfsi+0x70>
    2224:	56 95       	lsr	r21
    2226:	47 95       	ror	r20
    2228:	37 95       	ror	r19
    222a:	27 95       	ror	r18
    222c:	8a 95       	dec	r24
    222e:	d2 f7       	brpl	.-12     	; 0x2224 <__fixsfsi+0x68>
    2230:	66 23       	and	r22, r22
    2232:	81 f0       	breq	.+32     	; 0x2254 <__fixsfsi+0x98>
    2234:	50 95       	com	r21
    2236:	40 95       	com	r20
    2238:	30 95       	com	r19
    223a:	21 95       	neg	r18
    223c:	3f 4f       	sbci	r19, 0xFF	; 255
    223e:	4f 4f       	sbci	r20, 0xFF	; 255
    2240:	5f 4f       	sbci	r21, 0xFF	; 255
    2242:	08 c0       	rjmp	.+16     	; 0x2254 <__fixsfsi+0x98>
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	a9 01       	movw	r20, r18
    224a:	04 c0       	rjmp	.+8      	; 0x2254 <__fixsfsi+0x98>
    224c:	2f ef       	ldi	r18, 0xFF	; 255
    224e:	3f ef       	ldi	r19, 0xFF	; 255
    2250:	4f ef       	ldi	r20, 0xFF	; 255
    2252:	5f e7       	ldi	r21, 0x7F	; 127
    2254:	b9 01       	movw	r22, r18
    2256:	ca 01       	movw	r24, r20
    2258:	2c 96       	adiw	r28, 0x0c	; 12
    225a:	e2 e0       	ldi	r30, 0x02	; 2
    225c:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x20>

00002260 <__clzsi2>:
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	7b 01       	movw	r14, r22
    2272:	8c 01       	movw	r16, r24
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	e8 16       	cp	r14, r24
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	f8 06       	cpc	r15, r24
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	08 07       	cpc	r16, r24
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	18 07       	cpc	r17, r24
    2284:	58 f4       	brcc	.+22     	; 0x229c <__clzsi2+0x3c>
    2286:	ef ef       	ldi	r30, 0xFF	; 255
    2288:	ee 16       	cp	r14, r30
    228a:	f1 04       	cpc	r15, r1
    228c:	01 05       	cpc	r16, r1
    228e:	11 05       	cpc	r17, r1
    2290:	09 f0       	breq	.+2      	; 0x2294 <__clzsi2+0x34>
    2292:	90 f4       	brcc	.+36     	; 0x22b8 <__clzsi2+0x58>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	dc 01       	movw	r26, r24
    229a:	17 c0       	rjmp	.+46     	; 0x22ca <__clzsi2+0x6a>
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	ef 16       	cp	r14, r31
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	ff 06       	cpc	r15, r31
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	0f 07       	cpc	r16, r31
    22a8:	f1 e0       	ldi	r31, 0x01	; 1
    22aa:	1f 07       	cpc	r17, r31
    22ac:	50 f4       	brcc	.+20     	; 0x22c2 <__clzsi2+0x62>
    22ae:	80 e1       	ldi	r24, 0x10	; 16
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <__clzsi2+0x6a>
    22b8:	88 e0       	ldi	r24, 0x08	; 8
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <__clzsi2+0x6a>
    22c2:	88 e1       	ldi	r24, 0x18	; 24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e0       	ldi	r26, 0x00	; 0
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	20 e2       	ldi	r18, 0x20	; 32
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	28 1b       	sub	r18, r24
    22d4:	39 0b       	sbc	r19, r25
    22d6:	4a 0b       	sbc	r20, r26
    22d8:	5b 0b       	sbc	r21, r27
    22da:	57 01       	movw	r10, r14
    22dc:	68 01       	movw	r12, r16
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <__clzsi2+0x88>
    22e0:	d6 94       	lsr	r13
    22e2:	c7 94       	ror	r12
    22e4:	b7 94       	ror	r11
    22e6:	a7 94       	ror	r10
    22e8:	8a 95       	dec	r24
    22ea:	d2 f7       	brpl	.-12     	; 0x22e0 <__clzsi2+0x80>
    22ec:	d6 01       	movw	r26, r12
    22ee:	c5 01       	movw	r24, r10
    22f0:	82 58       	subi	r24, 0x82	; 130
    22f2:	9c 4f       	sbci	r25, 0xFC	; 252
    22f4:	fc 01       	movw	r30, r24
    22f6:	80 81       	ld	r24, Z
    22f8:	28 1b       	sub	r18, r24
    22fa:	31 09       	sbc	r19, r1
    22fc:	41 09       	sbc	r20, r1
    22fe:	51 09       	sbc	r21, r1
    2300:	c9 01       	movw	r24, r18
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	08 95       	ret

00002314 <__pack_f>:
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	fc 01       	movw	r30, r24
    2322:	24 81       	ldd	r18, Z+4	; 0x04
    2324:	35 81       	ldd	r19, Z+5	; 0x05
    2326:	46 81       	ldd	r20, Z+6	; 0x06
    2328:	57 81       	ldd	r21, Z+7	; 0x07
    232a:	61 81       	ldd	r22, Z+1	; 0x01
    232c:	80 81       	ld	r24, Z
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	20 f4       	brcc	.+8      	; 0x233a <__pack_f+0x26>
    2332:	40 61       	ori	r20, 0x10	; 16
    2334:	ef ef       	ldi	r30, 0xFF	; 255
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	a3 c0       	rjmp	.+326    	; 0x2480 <__pack_f+0x16c>
    233a:	84 30       	cpi	r24, 0x04	; 4
    233c:	09 f4       	brne	.+2      	; 0x2340 <__pack_f+0x2c>
    233e:	9b c0       	rjmp	.+310    	; 0x2476 <__pack_f+0x162>
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	09 f4       	brne	.+2      	; 0x2346 <__pack_f+0x32>
    2344:	92 c0       	rjmp	.+292    	; 0x246a <__pack_f+0x156>
    2346:	21 15       	cp	r18, r1
    2348:	31 05       	cpc	r19, r1
    234a:	41 05       	cpc	r20, r1
    234c:	51 05       	cpc	r21, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <__pack_f+0x3e>
    2350:	8f c0       	rjmp	.+286    	; 0x2470 <__pack_f+0x15c>
    2352:	02 80       	ldd	r0, Z+2	; 0x02
    2354:	f3 81       	ldd	r31, Z+3	; 0x03
    2356:	e0 2d       	mov	r30, r0
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	e2 38       	cpi	r30, 0x82	; 130
    235c:	f8 07       	cpc	r31, r24
    235e:	0c f0       	brlt	.+2      	; 0x2362 <__pack_f+0x4e>
    2360:	5a c0       	rjmp	.+180    	; 0x2416 <__pack_f+0x102>
    2362:	c2 e8       	ldi	r28, 0x82	; 130
    2364:	df ef       	ldi	r29, 0xFF	; 255
    2366:	ce 1b       	sub	r28, r30
    2368:	df 0b       	sbc	r29, r31
    236a:	ca 31       	cpi	r28, 0x1A	; 26
    236c:	d1 05       	cpc	r29, r1
    236e:	6c f5       	brge	.+90     	; 0x23ca <__pack_f+0xb6>
    2370:	79 01       	movw	r14, r18
    2372:	8a 01       	movw	r16, r20
    2374:	0c 2e       	mov	r0, r28
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <__pack_f+0x6c>
    2378:	16 95       	lsr	r17
    237a:	07 95       	ror	r16
    237c:	f7 94       	ror	r15
    237e:	e7 94       	ror	r14
    2380:	0a 94       	dec	r0
    2382:	d2 f7       	brpl	.-12     	; 0x2378 <__pack_f+0x64>
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e0       	ldi	r26, 0x00	; 0
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	0c 2e       	mov	r0, r28
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <__pack_f+0x84>
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	0a 94       	dec	r0
    239a:	d2 f7       	brpl	.-12     	; 0x2390 <__pack_f+0x7c>
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	a1 09       	sbc	r26, r1
    23a0:	b1 09       	sbc	r27, r1
    23a2:	82 23       	and	r24, r18
    23a4:	93 23       	and	r25, r19
    23a6:	a4 23       	and	r26, r20
    23a8:	b5 23       	and	r27, r21
    23aa:	21 e0       	ldi	r18, 0x01	; 1
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	50 e0       	ldi	r21, 0x00	; 0
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	a1 05       	cpc	r26, r1
    23b6:	b1 05       	cpc	r27, r1
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <__pack_f+0xac>
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	a9 01       	movw	r20, r18
    23c0:	2e 29       	or	r18, r14
    23c2:	3f 29       	or	r19, r15
    23c4:	40 2b       	or	r20, r16
    23c6:	51 2b       	or	r21, r17
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <__pack_f+0xbc>
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	a9 01       	movw	r20, r18
    23d0:	da 01       	movw	r26, r20
    23d2:	c9 01       	movw	r24, r18
    23d4:	8f 77       	andi	r24, 0x7F	; 127
    23d6:	90 70       	andi	r25, 0x00	; 0
    23d8:	a0 70       	andi	r26, 0x00	; 0
    23da:	b0 70       	andi	r27, 0x00	; 0
    23dc:	80 34       	cpi	r24, 0x40	; 64
    23de:	91 05       	cpc	r25, r1
    23e0:	a1 05       	cpc	r26, r1
    23e2:	b1 05       	cpc	r27, r1
    23e4:	39 f4       	brne	.+14     	; 0x23f4 <__pack_f+0xe0>
    23e6:	27 ff       	sbrs	r18, 7
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <__pack_f+0xe8>
    23ea:	20 5c       	subi	r18, 0xC0	; 192
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	4f 4f       	sbci	r20, 0xFF	; 255
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <__pack_f+0xe8>
    23f4:	21 5c       	subi	r18, 0xC1	; 193
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	4f 4f       	sbci	r20, 0xFF	; 255
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	e1 e0       	ldi	r30, 0x01	; 1
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	20 30       	cpi	r18, 0x00	; 0
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	38 07       	cpc	r19, r24
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	48 07       	cpc	r20, r24
    240a:	80 e4       	ldi	r24, 0x40	; 64
    240c:	58 07       	cpc	r21, r24
    240e:	28 f5       	brcc	.+74     	; 0x245a <__pack_f+0x146>
    2410:	e0 e0       	ldi	r30, 0x00	; 0
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	22 c0       	rjmp	.+68     	; 0x245a <__pack_f+0x146>
    2416:	e0 38       	cpi	r30, 0x80	; 128
    2418:	f1 05       	cpc	r31, r1
    241a:	6c f5       	brge	.+90     	; 0x2476 <__pack_f+0x162>
    241c:	e1 58       	subi	r30, 0x81	; 129
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	da 01       	movw	r26, r20
    2422:	c9 01       	movw	r24, r18
    2424:	8f 77       	andi	r24, 0x7F	; 127
    2426:	90 70       	andi	r25, 0x00	; 0
    2428:	a0 70       	andi	r26, 0x00	; 0
    242a:	b0 70       	andi	r27, 0x00	; 0
    242c:	80 34       	cpi	r24, 0x40	; 64
    242e:	91 05       	cpc	r25, r1
    2430:	a1 05       	cpc	r26, r1
    2432:	b1 05       	cpc	r27, r1
    2434:	39 f4       	brne	.+14     	; 0x2444 <__pack_f+0x130>
    2436:	27 ff       	sbrs	r18, 7
    2438:	09 c0       	rjmp	.+18     	; 0x244c <__pack_f+0x138>
    243a:	20 5c       	subi	r18, 0xC0	; 192
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	4f 4f       	sbci	r20, 0xFF	; 255
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	04 c0       	rjmp	.+8      	; 0x244c <__pack_f+0x138>
    2444:	21 5c       	subi	r18, 0xC1	; 193
    2446:	3f 4f       	sbci	r19, 0xFF	; 255
    2448:	4f 4f       	sbci	r20, 0xFF	; 255
    244a:	5f 4f       	sbci	r21, 0xFF	; 255
    244c:	57 ff       	sbrs	r21, 7
    244e:	05 c0       	rjmp	.+10     	; 0x245a <__pack_f+0x146>
    2450:	56 95       	lsr	r21
    2452:	47 95       	ror	r20
    2454:	37 95       	ror	r19
    2456:	27 95       	ror	r18
    2458:	31 96       	adiw	r30, 0x01	; 1
    245a:	87 e0       	ldi	r24, 0x07	; 7
    245c:	56 95       	lsr	r21
    245e:	47 95       	ror	r20
    2460:	37 95       	ror	r19
    2462:	27 95       	ror	r18
    2464:	8a 95       	dec	r24
    2466:	d1 f7       	brne	.-12     	; 0x245c <__pack_f+0x148>
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <__pack_f+0x16c>
    246a:	e0 e0       	ldi	r30, 0x00	; 0
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	05 c0       	rjmp	.+10     	; 0x247a <__pack_f+0x166>
    2470:	e0 e0       	ldi	r30, 0x00	; 0
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <__pack_f+0x16c>
    2476:	ef ef       	ldi	r30, 0xFF	; 255
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	8e 2f       	mov	r24, r30
    2482:	87 95       	ror	r24
    2484:	88 27       	eor	r24, r24
    2486:	87 95       	ror	r24
    2488:	94 2f       	mov	r25, r20
    248a:	9f 77       	andi	r25, 0x7F	; 127
    248c:	67 95       	ror	r22
    248e:	66 27       	eor	r22, r22
    2490:	67 95       	ror	r22
    2492:	e6 95       	lsr	r30
    2494:	e2 2e       	mov	r14, r18
    2496:	a9 2f       	mov	r26, r25
    2498:	a8 2b       	or	r26, r24
    249a:	fe 2f       	mov	r31, r30
    249c:	f6 2b       	or	r31, r22
    249e:	62 2f       	mov	r22, r18
    24a0:	73 2f       	mov	r23, r19
    24a2:	8a 2f       	mov	r24, r26
    24a4:	9f 2f       	mov	r25, r31
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	e6 e0       	ldi	r30, 0x06	; 6
    24ac:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

000024b0 <__unpack_f>:
    24b0:	dc 01       	movw	r26, r24
    24b2:	fb 01       	movw	r30, r22
    24b4:	2c 91       	ld	r18, X
    24b6:	11 96       	adiw	r26, 0x01	; 1
    24b8:	3c 91       	ld	r19, X
    24ba:	11 97       	sbiw	r26, 0x01	; 1
    24bc:	12 96       	adiw	r26, 0x02	; 2
    24be:	8c 91       	ld	r24, X
    24c0:	12 97       	sbiw	r26, 0x02	; 2
    24c2:	48 2f       	mov	r20, r24
    24c4:	4f 77       	andi	r20, 0x7F	; 127
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	98 2f       	mov	r25, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	99 27       	eor	r25, r25
    24ce:	99 1f       	adc	r25, r25
    24d0:	13 96       	adiw	r26, 0x03	; 3
    24d2:	6c 91       	ld	r22, X
    24d4:	13 97       	sbiw	r26, 0x03	; 3
    24d6:	86 2f       	mov	r24, r22
    24d8:	88 0f       	add	r24, r24
    24da:	89 2b       	or	r24, r25
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	66 1f       	adc	r22, r22
    24e0:	66 27       	eor	r22, r22
    24e2:	66 1f       	adc	r22, r22
    24e4:	61 83       	std	Z+1, r22	; 0x01
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	39 f5       	brne	.+78     	; 0x2538 <__unpack_f+0x88>
    24ea:	21 15       	cp	r18, r1
    24ec:	31 05       	cpc	r19, r1
    24ee:	41 05       	cpc	r20, r1
    24f0:	51 05       	cpc	r21, r1
    24f2:	11 f4       	brne	.+4      	; 0x24f8 <__unpack_f+0x48>
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	29 c0       	rjmp	.+82     	; 0x254a <__unpack_f+0x9a>
    24f8:	82 e8       	ldi	r24, 0x82	; 130
    24fa:	9f ef       	ldi	r25, 0xFF	; 255
    24fc:	93 83       	std	Z+3, r25	; 0x03
    24fe:	82 83       	std	Z+2, r24	; 0x02
    2500:	67 e0       	ldi	r22, 0x07	; 7
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	44 1f       	adc	r20, r20
    2508:	55 1f       	adc	r21, r21
    250a:	6a 95       	dec	r22
    250c:	d1 f7       	brne	.-12     	; 0x2502 <__unpack_f+0x52>
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	80 83       	st	Z, r24
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <__unpack_f+0x76>
    2514:	22 0f       	add	r18, r18
    2516:	33 1f       	adc	r19, r19
    2518:	44 1f       	adc	r20, r20
    251a:	55 1f       	adc	r21, r21
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	93 83       	std	Z+3, r25	; 0x03
    2524:	82 83       	std	Z+2, r24	; 0x02
    2526:	20 30       	cpi	r18, 0x00	; 0
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	38 07       	cpc	r19, r24
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	48 07       	cpc	r20, r24
    2530:	80 e4       	ldi	r24, 0x40	; 64
    2532:	58 07       	cpc	r21, r24
    2534:	78 f3       	brcs	.-34     	; 0x2514 <__unpack_f+0x64>
    2536:	20 c0       	rjmp	.+64     	; 0x2578 <__unpack_f+0xc8>
    2538:	8f 3f       	cpi	r24, 0xFF	; 255
    253a:	91 05       	cpc	r25, r1
    253c:	79 f4       	brne	.+30     	; 0x255c <__unpack_f+0xac>
    253e:	21 15       	cp	r18, r1
    2540:	31 05       	cpc	r19, r1
    2542:	41 05       	cpc	r20, r1
    2544:	51 05       	cpc	r21, r1
    2546:	19 f4       	brne	.+6      	; 0x254e <__unpack_f+0x9e>
    2548:	84 e0       	ldi	r24, 0x04	; 4
    254a:	80 83       	st	Z, r24
    254c:	08 95       	ret
    254e:	44 ff       	sbrs	r20, 4
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <__unpack_f+0xa8>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 83       	st	Z, r24
    2556:	10 c0       	rjmp	.+32     	; 0x2578 <__unpack_f+0xc8>
    2558:	10 82       	st	Z, r1
    255a:	0e c0       	rjmp	.+28     	; 0x2578 <__unpack_f+0xc8>
    255c:	8f 57       	subi	r24, 0x7F	; 127
    255e:	90 40       	sbci	r25, 0x00	; 0
    2560:	93 83       	std	Z+3, r25	; 0x03
    2562:	82 83       	std	Z+2, r24	; 0x02
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	80 83       	st	Z, r24
    2568:	87 e0       	ldi	r24, 0x07	; 7
    256a:	22 0f       	add	r18, r18
    256c:	33 1f       	adc	r19, r19
    256e:	44 1f       	adc	r20, r20
    2570:	55 1f       	adc	r21, r21
    2572:	8a 95       	dec	r24
    2574:	d1 f7       	brne	.-12     	; 0x256a <__unpack_f+0xba>
    2576:	50 64       	ori	r21, 0x40	; 64
    2578:	24 83       	std	Z+4, r18	; 0x04
    257a:	35 83       	std	Z+5, r19	; 0x05
    257c:	46 83       	std	Z+6, r20	; 0x06
    257e:	57 83       	std	Z+7, r21	; 0x07
    2580:	08 95       	ret

00002582 <__divmodhi4>:
    2582:	97 fb       	bst	r25, 7
    2584:	09 2e       	mov	r0, r25
    2586:	07 26       	eor	r0, r23
    2588:	0a d0       	rcall	.+20     	; 0x259e <__divmodhi4_neg1>
    258a:	77 fd       	sbrc	r23, 7
    258c:	04 d0       	rcall	.+8      	; 0x2596 <__divmodhi4_neg2>
    258e:	0c d0       	rcall	.+24     	; 0x25a8 <__udivmodhi4>
    2590:	06 d0       	rcall	.+12     	; 0x259e <__divmodhi4_neg1>
    2592:	00 20       	and	r0, r0
    2594:	1a f4       	brpl	.+6      	; 0x259c <__divmodhi4_exit>

00002596 <__divmodhi4_neg2>:
    2596:	70 95       	com	r23
    2598:	61 95       	neg	r22
    259a:	7f 4f       	sbci	r23, 0xFF	; 255

0000259c <__divmodhi4_exit>:
    259c:	08 95       	ret

0000259e <__divmodhi4_neg1>:
    259e:	f6 f7       	brtc	.-4      	; 0x259c <__divmodhi4_exit>
    25a0:	90 95       	com	r25
    25a2:	81 95       	neg	r24
    25a4:	9f 4f       	sbci	r25, 0xFF	; 255
    25a6:	08 95       	ret

000025a8 <__udivmodhi4>:
    25a8:	aa 1b       	sub	r26, r26
    25aa:	bb 1b       	sub	r27, r27
    25ac:	51 e1       	ldi	r21, 0x11	; 17
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <__udivmodhi4_ep>

000025b0 <__udivmodhi4_loop>:
    25b0:	aa 1f       	adc	r26, r26
    25b2:	bb 1f       	adc	r27, r27
    25b4:	a6 17       	cp	r26, r22
    25b6:	b7 07       	cpc	r27, r23
    25b8:	10 f0       	brcs	.+4      	; 0x25be <__udivmodhi4_ep>
    25ba:	a6 1b       	sub	r26, r22
    25bc:	b7 0b       	sbc	r27, r23

000025be <__udivmodhi4_ep>:
    25be:	88 1f       	adc	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	5a 95       	dec	r21
    25c4:	a9 f7       	brne	.-22     	; 0x25b0 <__udivmodhi4_loop>
    25c6:	80 95       	com	r24
    25c8:	90 95       	com	r25
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	08 95       	ret

000025d0 <__prologue_saves__>:
    25d0:	2f 92       	push	r2
    25d2:	3f 92       	push	r3
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	ca 1b       	sub	r28, r26
    25fa:	db 0b       	sbc	r29, r27
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	09 94       	ijmp

00002608 <__epilogue_restores__>:
    2608:	2a 88       	ldd	r2, Y+18	; 0x12
    260a:	39 88       	ldd	r3, Y+17	; 0x11
    260c:	48 88       	ldd	r4, Y+16	; 0x10
    260e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2610:	6e 84       	ldd	r6, Y+14	; 0x0e
    2612:	7d 84       	ldd	r7, Y+13	; 0x0d
    2614:	8c 84       	ldd	r8, Y+12	; 0x0c
    2616:	9b 84       	ldd	r9, Y+11	; 0x0b
    2618:	aa 84       	ldd	r10, Y+10	; 0x0a
    261a:	b9 84       	ldd	r11, Y+9	; 0x09
    261c:	c8 84       	ldd	r12, Y+8	; 0x08
    261e:	df 80       	ldd	r13, Y+7	; 0x07
    2620:	ee 80       	ldd	r14, Y+6	; 0x06
    2622:	fd 80       	ldd	r15, Y+5	; 0x05
    2624:	0c 81       	ldd	r16, Y+4	; 0x04
    2626:	1b 81       	ldd	r17, Y+3	; 0x03
    2628:	aa 81       	ldd	r26, Y+2	; 0x02
    262a:	b9 81       	ldd	r27, Y+1	; 0x01
    262c:	ce 0f       	add	r28, r30
    262e:	d1 1d       	adc	r29, r1
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	ed 01       	movw	r28, r26
    263c:	08 95       	ret

0000263e <do_rand>:
    263e:	af 92       	push	r10
    2640:	bf 92       	push	r11
    2642:	cf 92       	push	r12
    2644:	df 92       	push	r13
    2646:	ef 92       	push	r14
    2648:	ff 92       	push	r15
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	ec 01       	movw	r28, r24
    2654:	68 81       	ld	r22, Y
    2656:	79 81       	ldd	r23, Y+1	; 0x01
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	9b 81       	ldd	r25, Y+3	; 0x03
    265c:	61 15       	cp	r22, r1
    265e:	71 05       	cpc	r23, r1
    2660:	81 05       	cpc	r24, r1
    2662:	91 05       	cpc	r25, r1
    2664:	21 f4       	brne	.+8      	; 0x266e <do_rand+0x30>
    2666:	64 e2       	ldi	r22, 0x24	; 36
    2668:	79 ed       	ldi	r23, 0xD9	; 217
    266a:	8b e5       	ldi	r24, 0x5B	; 91
    266c:	97 e0       	ldi	r25, 0x07	; 7
    266e:	2d e1       	ldi	r18, 0x1D	; 29
    2670:	33 ef       	ldi	r19, 0xF3	; 243
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	50 e0       	ldi	r21, 0x00	; 0
    2676:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__divmodsi4>
    267a:	79 01       	movw	r14, r18
    267c:	8a 01       	movw	r16, r20
    267e:	27 ea       	ldi	r18, 0xA7	; 167
    2680:	31 e4       	ldi	r19, 0x41	; 65
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__mulsi3>
    268a:	5b 01       	movw	r10, r22
    268c:	6c 01       	movw	r12, r24
    268e:	c8 01       	movw	r24, r16
    2690:	b7 01       	movw	r22, r14
    2692:	2c ee       	ldi	r18, 0xEC	; 236
    2694:	34 ef       	ldi	r19, 0xF4	; 244
    2696:	4f ef       	ldi	r20, 0xFF	; 255
    2698:	5f ef       	ldi	r21, 0xFF	; 255
    269a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__mulsi3>
    269e:	6a 0d       	add	r22, r10
    26a0:	7b 1d       	adc	r23, r11
    26a2:	8c 1d       	adc	r24, r12
    26a4:	9d 1d       	adc	r25, r13
    26a6:	97 ff       	sbrs	r25, 7
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <do_rand+0x74>
    26aa:	61 50       	subi	r22, 0x01	; 1
    26ac:	70 40       	sbci	r23, 0x00	; 0
    26ae:	80 40       	sbci	r24, 0x00	; 0
    26b0:	90 48       	sbci	r25, 0x80	; 128
    26b2:	68 83       	st	Y, r22
    26b4:	79 83       	std	Y+1, r23	; 0x01
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	7f 77       	andi	r23, 0x7F	; 127
    26bc:	cb 01       	movw	r24, r22
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
    26ce:	bf 90       	pop	r11
    26d0:	af 90       	pop	r10
    26d2:	08 95       	ret

000026d4 <rand_r>:
    26d4:	0e 94 1f 13 	call	0x263e	; 0x263e <do_rand>
    26d8:	08 95       	ret

000026da <rand>:
    26da:	8e e7       	ldi	r24, 0x7E	; 126
    26dc:	94 e0       	ldi	r25, 0x04	; 4
    26de:	0e 94 1f 13 	call	0x263e	; 0x263e <do_rand>
    26e2:	08 95       	ret

000026e4 <srand>:
    26e4:	a0 e0       	ldi	r26, 0x00	; 0
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	80 93 7e 04 	sts	0x047E, r24
    26ec:	90 93 7f 04 	sts	0x047F, r25
    26f0:	a0 93 80 04 	sts	0x0480, r26
    26f4:	b0 93 81 04 	sts	0x0481, r27
    26f8:	08 95       	ret

000026fa <itoa>:
    26fa:	fb 01       	movw	r30, r22
    26fc:	9f 01       	movw	r18, r30
    26fe:	e8 94       	clt
    2700:	42 30       	cpi	r20, 0x02	; 2
    2702:	c4 f0       	brlt	.+48     	; 0x2734 <itoa+0x3a>
    2704:	45 32       	cpi	r20, 0x25	; 37
    2706:	b4 f4       	brge	.+44     	; 0x2734 <itoa+0x3a>
    2708:	4a 30       	cpi	r20, 0x0A	; 10
    270a:	29 f4       	brne	.+10     	; 0x2716 <itoa+0x1c>
    270c:	97 fb       	bst	r25, 7
    270e:	1e f4       	brtc	.+6      	; 0x2716 <itoa+0x1c>
    2710:	90 95       	com	r25
    2712:	81 95       	neg	r24
    2714:	9f 4f       	sbci	r25, 0xFF	; 255
    2716:	64 2f       	mov	r22, r20
    2718:	77 27       	eor	r23, r23
    271a:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__udivmodhi4>
    271e:	80 5d       	subi	r24, 0xD0	; 208
    2720:	8a 33       	cpi	r24, 0x3A	; 58
    2722:	0c f0       	brlt	.+2      	; 0x2726 <itoa+0x2c>
    2724:	89 5d       	subi	r24, 0xD9	; 217
    2726:	81 93       	st	Z+, r24
    2728:	cb 01       	movw	r24, r22
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	a1 f7       	brne	.-24     	; 0x2716 <itoa+0x1c>
    272e:	16 f4       	brtc	.+4      	; 0x2734 <itoa+0x3a>
    2730:	5d e2       	ldi	r21, 0x2D	; 45
    2732:	51 93       	st	Z+, r21
    2734:	10 82       	st	Z, r1
    2736:	c9 01       	movw	r24, r18
    2738:	0c 94 cd 13 	jmp	0x279a	; 0x279a <strrev>

0000273c <__eerd_block_m128>:
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22

00002740 <__eerd_blraw_m128>:
    2740:	fc 01       	movw	r30, r24
    2742:	e1 99       	sbic	0x1c, 1	; 28
    2744:	fe cf       	rjmp	.-4      	; 0x2742 <__eerd_blraw_m128+0x2>
    2746:	06 c0       	rjmp	.+12     	; 0x2754 <__eerd_blraw_m128+0x14>
    2748:	ff bb       	out	0x1f, r31	; 31
    274a:	ee bb       	out	0x1e, r30	; 30
    274c:	e0 9a       	sbi	0x1c, 0	; 28
    274e:	31 96       	adiw	r30, 0x01	; 1
    2750:	0d b2       	in	r0, 0x1d	; 29
    2752:	0d 92       	st	X+, r0
    2754:	41 50       	subi	r20, 0x01	; 1
    2756:	50 40       	sbci	r21, 0x00	; 0
    2758:	b8 f7       	brcc	.-18     	; 0x2748 <__eerd_blraw_m128+0x8>
    275a:	08 95       	ret

0000275c <__eerd_byte_m128>:
    275c:	e1 99       	sbic	0x1c, 1	; 28
    275e:	fe cf       	rjmp	.-4      	; 0x275c <__eerd_byte_m128>
    2760:	9f bb       	out	0x1f, r25	; 31
    2762:	8e bb       	out	0x1e, r24	; 30
    2764:	e0 9a       	sbi	0x1c, 0	; 28
    2766:	99 27       	eor	r25, r25
    2768:	8d b3       	in	r24, 0x1d	; 29
    276a:	08 95       	ret

0000276c <__eewr_block_m128>:
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <__eewr_block_m128+0xc>
    2772:	2d 91       	ld	r18, X+
    2774:	0e 94 c1 13 	call	0x2782	; 0x2782 <__eewr_r18_m128>
    2778:	41 50       	subi	r20, 0x01	; 1
    277a:	50 40       	sbci	r21, 0x00	; 0
    277c:	d0 f7       	brcc	.-12     	; 0x2772 <__eewr_block_m128+0x6>
    277e:	08 95       	ret

00002780 <__eewr_byte_m128>:
    2780:	26 2f       	mov	r18, r22

00002782 <__eewr_r18_m128>:
    2782:	e1 99       	sbic	0x1c, 1	; 28
    2784:	fe cf       	rjmp	.-4      	; 0x2782 <__eewr_r18_m128>
    2786:	9f bb       	out	0x1f, r25	; 31
    2788:	8e bb       	out	0x1e, r24	; 30
    278a:	2d bb       	out	0x1d, r18	; 29
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	e2 9a       	sbi	0x1c, 2	; 28
    2792:	e1 9a       	sbi	0x1c, 1	; 28
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	08 95       	ret

0000279a <strrev>:
    279a:	dc 01       	movw	r26, r24
    279c:	fc 01       	movw	r30, r24
    279e:	67 2f       	mov	r22, r23
    27a0:	71 91       	ld	r23, Z+
    27a2:	77 23       	and	r23, r23
    27a4:	e1 f7       	brne	.-8      	; 0x279e <strrev+0x4>
    27a6:	32 97       	sbiw	r30, 0x02	; 2
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <strrev+0x18>
    27aa:	7c 91       	ld	r23, X
    27ac:	6d 93       	st	X+, r22
    27ae:	70 83       	st	Z, r23
    27b0:	62 91       	ld	r22, -Z
    27b2:	ae 17       	cp	r26, r30
    27b4:	bf 07       	cpc	r27, r31
    27b6:	c8 f3       	brcs	.-14     	; 0x27aa <strrev+0x10>
    27b8:	08 95       	ret

000027ba <__mulsi3>:
    27ba:	62 9f       	mul	r22, r18
    27bc:	d0 01       	movw	r26, r0
    27be:	73 9f       	mul	r23, r19
    27c0:	f0 01       	movw	r30, r0
    27c2:	82 9f       	mul	r24, r18
    27c4:	e0 0d       	add	r30, r0
    27c6:	f1 1d       	adc	r31, r1
    27c8:	64 9f       	mul	r22, r20
    27ca:	e0 0d       	add	r30, r0
    27cc:	f1 1d       	adc	r31, r1
    27ce:	92 9f       	mul	r25, r18
    27d0:	f0 0d       	add	r31, r0
    27d2:	83 9f       	mul	r24, r19
    27d4:	f0 0d       	add	r31, r0
    27d6:	74 9f       	mul	r23, r20
    27d8:	f0 0d       	add	r31, r0
    27da:	65 9f       	mul	r22, r21
    27dc:	f0 0d       	add	r31, r0
    27de:	99 27       	eor	r25, r25
    27e0:	72 9f       	mul	r23, r18
    27e2:	b0 0d       	add	r27, r0
    27e4:	e1 1d       	adc	r30, r1
    27e6:	f9 1f       	adc	r31, r25
    27e8:	63 9f       	mul	r22, r19
    27ea:	b0 0d       	add	r27, r0
    27ec:	e1 1d       	adc	r30, r1
    27ee:	f9 1f       	adc	r31, r25
    27f0:	bd 01       	movw	r22, r26
    27f2:	cf 01       	movw	r24, r30
    27f4:	11 24       	eor	r1, r1
    27f6:	08 95       	ret

000027f8 <__divmodsi4>:
    27f8:	97 fb       	bst	r25, 7
    27fa:	09 2e       	mov	r0, r25
    27fc:	05 26       	eor	r0, r21
    27fe:	0e d0       	rcall	.+28     	; 0x281c <__divmodsi4_neg1>
    2800:	57 fd       	sbrc	r21, 7
    2802:	04 d0       	rcall	.+8      	; 0x280c <__divmodsi4_neg2>
    2804:	14 d0       	rcall	.+40     	; 0x282e <__udivmodsi4>
    2806:	0a d0       	rcall	.+20     	; 0x281c <__divmodsi4_neg1>
    2808:	00 1c       	adc	r0, r0
    280a:	38 f4       	brcc	.+14     	; 0x281a <__divmodsi4_exit>

0000280c <__divmodsi4_neg2>:
    280c:	50 95       	com	r21
    280e:	40 95       	com	r20
    2810:	30 95       	com	r19
    2812:	21 95       	neg	r18
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	4f 4f       	sbci	r20, 0xFF	; 255
    2818:	5f 4f       	sbci	r21, 0xFF	; 255

0000281a <__divmodsi4_exit>:
    281a:	08 95       	ret

0000281c <__divmodsi4_neg1>:
    281c:	f6 f7       	brtc	.-4      	; 0x281a <__divmodsi4_exit>
    281e:	90 95       	com	r25
    2820:	80 95       	com	r24
    2822:	70 95       	com	r23
    2824:	61 95       	neg	r22
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	08 95       	ret

0000282e <__udivmodsi4>:
    282e:	a1 e2       	ldi	r26, 0x21	; 33
    2830:	1a 2e       	mov	r1, r26
    2832:	aa 1b       	sub	r26, r26
    2834:	bb 1b       	sub	r27, r27
    2836:	fd 01       	movw	r30, r26
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <__udivmodsi4_ep>

0000283a <__udivmodsi4_loop>:
    283a:	aa 1f       	adc	r26, r26
    283c:	bb 1f       	adc	r27, r27
    283e:	ee 1f       	adc	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	a2 17       	cp	r26, r18
    2844:	b3 07       	cpc	r27, r19
    2846:	e4 07       	cpc	r30, r20
    2848:	f5 07       	cpc	r31, r21
    284a:	20 f0       	brcs	.+8      	; 0x2854 <__udivmodsi4_ep>
    284c:	a2 1b       	sub	r26, r18
    284e:	b3 0b       	sbc	r27, r19
    2850:	e4 0b       	sbc	r30, r20
    2852:	f5 0b       	sbc	r31, r21

00002854 <__udivmodsi4_ep>:
    2854:	66 1f       	adc	r22, r22
    2856:	77 1f       	adc	r23, r23
    2858:	88 1f       	adc	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	1a 94       	dec	r1
    285e:	69 f7       	brne	.-38     	; 0x283a <__udivmodsi4_loop>
    2860:	60 95       	com	r22
    2862:	70 95       	com	r23
    2864:	80 95       	com	r24
    2866:	90 95       	com	r25
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	bd 01       	movw	r22, r26
    286e:	cf 01       	movw	r24, r30
    2870:	08 95       	ret

00002872 <_exit>:
    2872:	f8 94       	cli

00002874 <__stop_program>:
    2874:	ff cf       	rjmp	.-2      	; 0x2874 <__stop_program>
